{"version":3,"file":"static/js/175.fada1d14.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","../node_modules/@babel/runtime/helpers/defineProperty.js","../node_modules/web-streams-polyfill/src/stub/symbol.ts","../node_modules/web-streams-polyfill/src/utils.ts","../node_modules/web-streams-polyfill/src/lib/helpers/miscellaneous.ts","../node_modules/web-streams-polyfill/src/lib/helpers/webidl.ts","../node_modules/web-streams-polyfill/src/lib/simple-queue.ts","../node_modules/web-streams-polyfill/src/lib/readable-stream/generic-reader.ts","../node_modules/web-streams-polyfill/src/lib/abstract-ops/internal-methods.ts","../node_modules/web-streams-polyfill/src/stub/number-isfinite.ts","../node_modules/web-streams-polyfill/src/stub/math-trunc.ts","../node_modules/web-streams-polyfill/src/lib/validators/basic.ts","../node_modules/web-streams-polyfill/src/lib/validators/readable-stream.ts","../node_modules/web-streams-polyfill/src/lib/readable-stream/default-reader.ts","../node_modules/web-streams-polyfill/src/target/es5/stub/async-iterator-prototype.ts","../node_modules/web-streams-polyfill/src/lib/readable-stream/async-iterator.ts","../node_modules/web-streams-polyfill/src/stub/number-isnan.ts","../node_modules/web-streams-polyfill/src/lib/abstract-ops/ecmascript.ts","../node_modules/web-streams-polyfill/src/lib/abstract-ops/miscellaneous.ts","../node_modules/web-streams-polyfill/src/lib/abstract-ops/queue-with-sizes.ts","../node_modules/web-streams-polyfill/src/lib/readable-stream/byte-stream-controller.ts","../node_modules/web-streams-polyfill/src/lib/readable-stream/byob-reader.ts","../node_modules/web-streams-polyfill/src/lib/abstract-ops/queuing-strategy.ts","../node_modules/web-streams-polyfill/src/lib/validators/queuing-strategy.ts","../node_modules/web-streams-polyfill/src/lib/validators/underlying-sink.ts","../node_modules/web-streams-polyfill/src/lib/validators/writable-stream.ts","../node_modules/web-streams-polyfill/src/lib/abort-signal.ts","../node_modules/web-streams-polyfill/src/lib/writable-stream.ts","../node_modules/web-streams-polyfill/src/stub/native.ts","../node_modules/web-streams-polyfill/src/stub/dom-exception.ts","../node_modules/web-streams-polyfill/src/lib/readable-stream/pipe.ts","../node_modules/web-streams-polyfill/src/lib/readable-stream/default-controller.ts","../node_modules/web-streams-polyfill/src/lib/readable-stream/tee.ts","../node_modules/web-streams-polyfill/src/lib/validators/underlying-source.ts","../node_modules/web-streams-polyfill/src/lib/validators/reader-options.ts","../node_modules/web-streams-polyfill/src/lib/validators/pipe-options.ts","../node_modules/web-streams-polyfill/src/lib/readable-stream.ts","../node_modules/web-streams-polyfill/src/lib/validators/readable-writable-pair.ts","../node_modules/web-streams-polyfill/src/lib/validators/iterator-options.ts","../node_modules/web-streams-polyfill/src/lib/validators/queuing-strategy-init.ts","../node_modules/web-streams-polyfill/src/lib/byte-length-queuing-strategy.ts","../node_modules/web-streams-polyfill/src/lib/count-queuing-strategy.ts","../node_modules/web-streams-polyfill/src/lib/validators/transformer.ts","../node_modules/web-streams-polyfill/src/lib/transform-stream.ts","../node_modules/web-streams-polyfill/src/polyfill.ts"],"sourcesContent":["function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","/// <reference lib=\"es2015.symbol\" />\n\nconst SymbolPolyfill: (description?: string) => symbol =\n  typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ?\n    Symbol :\n    description => `Symbol(${description})` as any as symbol;\n\nexport default SymbolPolyfill;\n","/// <reference lib=\"dom\" />\n\nexport function noop(): undefined {\n  return undefined;\n}\n\nfunction getGlobals() {\n  if (typeof self !== 'undefined') {\n    return self;\n  } else if (typeof window !== 'undefined') {\n    return window;\n  } else if (typeof global !== 'undefined') {\n    return global;\n  }\n  return undefined;\n}\n\nexport const globals = getGlobals();\n","import { noop } from '../../utils';\nimport { AssertionError } from '../../stub/assert';\n\nexport function typeIsObject(x: any): x is object {\n  return (typeof x === 'object' && x !== null) || typeof x === 'function';\n}\n\nexport const rethrowAssertionErrorRejection: (e: any) => void =\n  DEBUG ? e => {\n    // Used throughout the reference implementation, as `.catch(rethrowAssertionErrorRejection)`, to ensure any errors\n    // get shown. There are places in the spec where we do promise transformations and purposefully ignore or don't\n    // expect any errors, but assertion errors are always problematic.\n    if (e && e instanceof AssertionError) {\n      setTimeout(() => {\n        throw e;\n      }, 0);\n    }\n  } : noop;\n","import { globals } from '../../utils';\nimport { rethrowAssertionErrorRejection } from './miscellaneous';\nimport assert from '../../stub/assert';\n\nconst originalPromise = Promise;\nconst originalPromiseThen = Promise.prototype.then;\nconst originalPromiseResolve = Promise.resolve.bind(originalPromise);\nconst originalPromiseReject = Promise.reject.bind(originalPromise);\n\nexport function newPromise<T>(executor: (\n  resolve: (value: T | PromiseLike<T>) => void,\n  reject: (reason?: any) => void\n) => void): Promise<T> {\n  return new originalPromise(executor);\n}\n\nexport function promiseResolvedWith<T>(value: T | PromiseLike<T>): Promise<T> {\n  return originalPromiseResolve(value);\n}\n\nexport function promiseRejectedWith<T = never>(reason: any): Promise<T> {\n  return originalPromiseReject(reason);\n}\n\nexport function PerformPromiseThen<T, TResult1 = T, TResult2 = never>(\n  promise: Promise<T>,\n  onFulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>,\n  onRejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\n  // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n  // approximation.\n  return originalPromiseThen.call(promise, onFulfilled, onRejected) as Promise<TResult1 | TResult2>;\n}\n\nexport function uponPromise<T>(\n  promise: Promise<T>,\n  onFulfilled?: (value: T) => void | PromiseLike<void>,\n  onRejected?: (reason: any) => void | PromiseLike<void>): void {\n  PerformPromiseThen(\n    PerformPromiseThen(promise, onFulfilled, onRejected),\n    undefined,\n    rethrowAssertionErrorRejection\n  );\n}\n\nexport function uponFulfillment<T>(promise: Promise<T>, onFulfilled: (value: T) => void | PromiseLike<void>): void {\n  uponPromise(promise, onFulfilled);\n}\n\nexport function uponRejection(promise: Promise<unknown>, onRejected: (reason: any) => void | PromiseLike<void>): void {\n  uponPromise(promise, undefined, onRejected);\n}\n\nexport function transformPromiseWith<T, TResult1 = T, TResult2 = never>(\n  promise: Promise<T>,\n  fulfillmentHandler?: (value: T) => TResult1 | PromiseLike<TResult1>,\n  rejectionHandler?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\n  return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n}\n\nexport function setPromiseIsHandledToTrue(promise: Promise<unknown>): void {\n  PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n}\n\nexport const queueMicrotask: (fn: () => void) => void = (() => {\n  const globalQueueMicrotask = globals && globals.queueMicrotask;\n  if (typeof globalQueueMicrotask === 'function') {\n    return globalQueueMicrotask;\n  }\n\n  const resolvedPromise = promiseResolvedWith(undefined);\n  return (fn: () => void) => PerformPromiseThen(resolvedPromise, fn);\n})();\n\nexport function reflectCall<T, A extends any[], R>(F: (this: T, ...fnArgs: A) => R, V: T, args: A): R {\n  if (typeof F !== 'function') {\n    throw new TypeError('Argument is not a function');\n  }\n  return Function.prototype.apply.call(F, V, args);\n}\n\nexport function promiseCall<T, A extends any[], R>(F: (this: T, ...fnArgs: A) => R | PromiseLike<R>,\n                                                   V: T,\n                                                   args: A): Promise<R> {\n  assert(typeof F === 'function');\n  assert(V !== undefined);\n  assert(Array.isArray(args));\n  try {\n    return promiseResolvedWith(reflectCall(F, V, args));\n  } catch (value) {\n    return promiseRejectedWith(value);\n  }\n}\n","import assert from '../stub/assert';\n\n// Original from Chromium\n// https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n\nconst QUEUE_MAX_ARRAY_SIZE = 16384;\n\ninterface Node<T> {\n  _elements: T[];\n  _next: Node<T> | undefined;\n}\n\n/**\n * Simple queue structure.\n *\n * Avoids scalability issues with using a packed array directly by using\n * multiple arrays in a linked list and keeping the array size bounded.\n */\nexport class SimpleQueue<T> {\n  private _front: Node<T>;\n  private _back: Node<T>;\n  private _cursor = 0;\n  private _size = 0;\n\n  constructor() {\n    // _front and _back are always defined.\n    this._front = {\n      _elements: [],\n      _next: undefined\n    };\n    this._back = this._front;\n    // The cursor is used to avoid calling Array.shift().\n    // It contains the index of the front element of the array inside the\n    // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n    this._cursor = 0;\n    // When there is only one node, size === elements.length - cursor.\n    this._size = 0;\n  }\n\n  get length(): number {\n    return this._size;\n  }\n\n  // For exception safety, this method is structured in order:\n  // 1. Read state\n  // 2. Calculate required state mutations\n  // 3. Perform state mutations\n  push(element: T): void {\n    const oldBack = this._back;\n    let newBack = oldBack;\n    assert(oldBack._next === undefined);\n    if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n      newBack = {\n        _elements: [],\n        _next: undefined\n      };\n    }\n\n    // push() is the mutation most likely to throw an exception, so it\n    // goes first.\n    oldBack._elements.push(element);\n    if (newBack !== oldBack) {\n      this._back = newBack;\n      oldBack._next = newBack;\n    }\n    ++this._size;\n  }\n\n  // Like push(), shift() follows the read -> calculate -> mutate pattern for\n  // exception safety.\n  shift(): T {\n    assert(this._size > 0); // must not be called on an empty queue\n\n    const oldFront = this._front;\n    let newFront = oldFront;\n    const oldCursor = this._cursor;\n    let newCursor = oldCursor + 1;\n\n    const elements = oldFront._elements;\n    const element = elements[oldCursor];\n\n    if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n      assert(elements.length === QUEUE_MAX_ARRAY_SIZE);\n      assert(oldFront._next !== undefined);\n      newFront = oldFront._next!;\n      newCursor = 0;\n    }\n\n    // No mutations before this point.\n    --this._size;\n    this._cursor = newCursor;\n    if (oldFront !== newFront) {\n      this._front = newFront;\n    }\n\n    // Permit shifted element to be garbage collected.\n    elements[oldCursor] = undefined!;\n\n    return element;\n  }\n\n  // The tricky thing about forEach() is that it can be called\n  // re-entrantly. The queue may be mutated inside the callback. It is easy to\n  // see that push() within the callback has no negative effects since the end\n  // of the queue is checked for on every iteration. If shift() is called\n  // repeatedly within the callback then the next iteration may return an\n  // element that has been removed. In this case the callback will be called\n  // with undefined values until we either \"catch up\" with elements that still\n  // exist or reach the back of the queue.\n  forEach(callback: (element: T) => void): void {\n    let i = this._cursor;\n    let node = this._front;\n    let elements = node._elements;\n    while (i !== elements.length || node._next !== undefined) {\n      if (i === elements.length) {\n        assert(node._next !== undefined);\n        assert(i === QUEUE_MAX_ARRAY_SIZE);\n        node = node._next!;\n        elements = node._elements;\n        i = 0;\n        if (elements.length === 0) {\n          break;\n        }\n      }\n      callback(elements[i]);\n      ++i;\n    }\n  }\n\n  // Return the element that would be returned if shift() was called now,\n  // without modifying the queue.\n  peek(): T {\n    assert(this._size > 0); // must not be called on an empty queue\n\n    const front = this._front;\n    const cursor = this._cursor;\n    return front._elements[cursor];\n  }\n}\n","import assert from '../../stub/assert';\nimport { ReadableStream, ReadableStreamCancel, ReadableStreamReader } from '../readable-stream';\nimport { newPromise, setPromiseIsHandledToTrue } from '../helpers/webidl';\n\nexport function ReadableStreamReaderGenericInitialize<R>(reader: ReadableStreamReader<R>, stream: ReadableStream<R>) {\n  reader._ownerReadableStream = stream;\n  stream._reader = reader;\n\n  if (stream._state === 'readable') {\n    defaultReaderClosedPromiseInitialize(reader);\n  } else if (stream._state === 'closed') {\n    defaultReaderClosedPromiseInitializeAsResolved(reader);\n  } else {\n    assert(stream._state === 'errored');\n\n    defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n  }\n}\n\n// A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n// check.\n\nexport function ReadableStreamReaderGenericCancel(reader: ReadableStreamReader<any>, reason: any): Promise<undefined> {\n  const stream = reader._ownerReadableStream;\n  assert(stream !== undefined);\n  return ReadableStreamCancel(stream, reason);\n}\n\nexport function ReadableStreamReaderGenericRelease(reader: ReadableStreamReader<any>) {\n  assert(reader._ownerReadableStream !== undefined);\n  assert(reader._ownerReadableStream._reader === reader);\n\n  if (reader._ownerReadableStream._state === 'readable') {\n    defaultReaderClosedPromiseReject(\n      reader,\n      new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n  } else {\n    defaultReaderClosedPromiseResetToRejected(\n      reader,\n      new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n  }\n\n  reader._ownerReadableStream._reader = undefined;\n  reader._ownerReadableStream = undefined!;\n}\n\n// Helper functions for the readers.\n\nexport function readerLockException(name: string): TypeError {\n  return new TypeError('Cannot ' + name + ' a stream using a released reader');\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nexport function defaultReaderClosedPromiseInitialize(reader: ReadableStreamReader<any>) {\n  reader._closedPromise = newPromise((resolve, reject) => {\n    reader._closedPromise_resolve = resolve;\n    reader._closedPromise_reject = reject;\n  });\n}\n\nexport function defaultReaderClosedPromiseInitializeAsRejected(reader: ReadableStreamReader<any>, reason: any) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseReject(reader, reason);\n}\n\nexport function defaultReaderClosedPromiseInitializeAsResolved(reader: ReadableStreamReader<any>) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseResolve(reader);\n}\n\nexport function defaultReaderClosedPromiseReject(reader: ReadableStreamReader<any>, reason: any) {\n  if (reader._closedPromise_reject === undefined) {\n    return;\n  }\n\n  setPromiseIsHandledToTrue(reader._closedPromise);\n  reader._closedPromise_reject(reason);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\nexport function defaultReaderClosedPromiseResetToRejected(reader: ReadableStreamReader<any>, reason: any) {\n  assert(reader._closedPromise_resolve === undefined);\n  assert(reader._closedPromise_reject === undefined);\n\n  defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n}\n\nexport function defaultReaderClosedPromiseResolve(reader: ReadableStreamReader<any>) {\n  if (reader._closedPromise_resolve === undefined) {\n    return;\n  }\n\n  reader._closedPromise_resolve(undefined);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n","export const AbortSteps = Symbol('[[AbortSteps]]');\nexport const ErrorSteps = Symbol('[[ErrorSteps]]');\nexport const CancelSteps = Symbol('[[CancelSteps]]');\nexport const PullSteps = Symbol('[[PullSteps]]');\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\nconst NumberIsFinite: typeof Number.isFinite = Number.isFinite || function (x) {\n  return typeof x === 'number' && isFinite(x);\n};\n\nexport default NumberIsFinite;\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\nconst MathTrunc: typeof Math.trunc = Math.trunc || function (v) {\n  return v < 0 ? Math.ceil(v) : Math.floor(v);\n};\n\nexport default MathTrunc;\n","import NumberIsFinite from '../../stub/number-isfinite';\nimport MathTrunc from '../../stub/math-trunc';\n\n// https://heycam.github.io/webidl/#idl-dictionaries\nexport function isDictionary(x: any): x is object | null {\n  return typeof x === 'object' || typeof x === 'function';\n}\n\nexport function assertDictionary(obj: unknown,\n                                 context: string): asserts obj is object | null | undefined {\n  if (obj !== undefined && !isDictionary(obj)) {\n    throw new TypeError(`${context} is not an object.`);\n  }\n}\n\nexport type AnyFunction = (...args: any[]) => any;\n\n// https://heycam.github.io/webidl/#idl-callback-functions\nexport function assertFunction(x: unknown, context: string): asserts x is AnyFunction {\n  if (typeof x !== 'function') {\n    throw new TypeError(`${context} is not a function.`);\n  }\n}\n\n// https://heycam.github.io/webidl/#idl-object\nexport function isObject(x: any): x is object {\n  return (typeof x === 'object' && x !== null) || typeof x === 'function';\n}\n\nexport function assertObject(x: unknown,\n                             context: string): asserts x is object {\n  if (!isObject(x)) {\n    throw new TypeError(`${context} is not an object.`);\n  }\n}\n\nexport function assertRequiredArgument<T extends any>(x: T | undefined,\n                                                      position: number,\n                                                      context: string): asserts x is T {\n  if (x === undefined) {\n    throw new TypeError(`Parameter ${position} is required in '${context}'.`);\n  }\n}\n\nexport function assertRequiredField<T extends any>(x: T | undefined,\n                                                   field: string,\n                                                   context: string): asserts x is T {\n  if (x === undefined) {\n    throw new TypeError(`${field} is required in '${context}'.`);\n  }\n}\n\n// https://heycam.github.io/webidl/#idl-unrestricted-double\nexport function convertUnrestrictedDouble(value: unknown): number {\n  return Number(value);\n}\n\nfunction censorNegativeZero(x: number): number {\n  return x === 0 ? 0 : x;\n}\n\nfunction integerPart(x: number): number {\n  return censorNegativeZero(MathTrunc(x));\n}\n\n// https://heycam.github.io/webidl/#idl-unsigned-long-long\nexport function convertUnsignedLongLongWithEnforceRange(value: unknown, context: string): number {\n  const lowerBound = 0;\n  const upperBound = Number.MAX_SAFE_INTEGER;\n\n  let x = Number(value);\n  x = censorNegativeZero(x);\n\n  if (!NumberIsFinite(x)) {\n    throw new TypeError(`${context} is not a finite number`);\n  }\n\n  x = integerPart(x);\n\n  if (x < lowerBound || x > upperBound) {\n    throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\n  }\n\n  if (!NumberIsFinite(x) || x === 0) {\n    return 0;\n  }\n\n  // TODO Use BigInt if supported?\n  // let xBigInt = BigInt(integerPart(x));\n  // xBigInt = BigInt.asUintN(64, xBigInt);\n  // return Number(xBigInt);\n\n  return x;\n}\n","import { IsReadableStream, ReadableStream } from '../readable-stream';\n\nexport function assertReadableStream(x: unknown, context: string): asserts x is ReadableStream {\n  if (!IsReadableStream(x)) {\n    throw new TypeError(`${context} is not a ReadableStream.`);\n  }\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericInitialize,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport { IsReadableStreamLocked, ReadableStream } from '../readable-stream';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { PullSteps } from '../abstract-ops/internal-methods';\nimport { newPromise, promiseRejectedWith } from '../helpers/webidl';\nimport { assertRequiredArgument } from '../validators/basic';\nimport { assertReadableStream } from '../validators/readable-stream';\n\n/**\n * A result returned by {@link ReadableStreamDefaultReader.read}.\n *\n * @public\n */\nexport type ReadableStreamDefaultReadResult<T> = {\n  done: false;\n  value: T;\n} | {\n  done: true;\n  value?: undefined;\n}\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamDefaultReader<R>(stream: ReadableStream): ReadableStreamDefaultReader<R> {\n  return new ReadableStreamDefaultReader(stream);\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamAddReadRequest<R>(stream: ReadableStream<R>,\n                                                readRequest: ReadRequest<R>): void {\n  assert(IsReadableStreamDefaultReader(stream._reader));\n  assert(stream._state === 'readable');\n\n  (stream._reader! as ReadableStreamDefaultReader<R>)._readRequests.push(readRequest);\n}\n\nexport function ReadableStreamFulfillReadRequest<R>(stream: ReadableStream<R>, chunk: R | undefined, done: boolean) {\n  const reader = stream._reader as ReadableStreamDefaultReader<R>;\n\n  assert(reader._readRequests.length > 0);\n\n  const readRequest = reader._readRequests.shift()!;\n  if (done) {\n    readRequest._closeSteps();\n  } else {\n    readRequest._chunkSteps(chunk!);\n  }\n}\n\nexport function ReadableStreamGetNumReadRequests<R>(stream: ReadableStream<R>): number {\n  return (stream._reader as ReadableStreamDefaultReader<R>)._readRequests.length;\n}\n\nexport function ReadableStreamHasDefaultReader(stream: ReadableStream): boolean {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (!IsReadableStreamDefaultReader(reader)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nexport interface ReadRequest<R> {\n  _chunkSteps(chunk: R): void;\n\n  _closeSteps(): void;\n\n  _errorSteps(e: any): void;\n}\n\n/**\n * A default reader vended by a {@link ReadableStream}.\n *\n * @public\n */\nexport class ReadableStreamDefaultReader<R = any> {\n  /** @internal */\n  _ownerReadableStream!: ReadableStream<R>;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readRequests: SimpleQueue<ReadRequest<R>>;\n\n  constructor(stream: ReadableStream<R>) {\n    assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n    assertReadableStream(stream, 'First parameter');\n\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readRequests = new SimpleQueue();\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed,\n   * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  /**\n   * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n   *\n   * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n   */\n  read(): Promise<ReadableStreamDefaultReadResult<R>> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('read from'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamDefaultReadResult<R>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamDefaultReadResult<R>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n      _closeSteps: () => resolvePromise({ value: undefined, done: true }),\n      _errorSteps: e => rejectPromise(e)\n    };\n    ReadableStreamDefaultReaderRead(this, readRequest);\n    return promise;\n  }\n\n  /**\n   * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n   * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n   * from now on; otherwise, the reader will appear closed.\n   *\n   * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n   * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n   * do so will throw a `TypeError` and leave the reader locked to the stream.\n   */\n  releaseLock(): void {\n    if (!IsReadableStreamDefaultReader(this)) {\n      throw defaultReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\nObject.defineProperties(ReadableStreamDefaultReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultReader.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamDefaultReader',\n    configurable: true\n  });\n}\n\n// Abstract operations for the readers.\n\nexport function IsReadableStreamDefaultReader<R = any>(x: any): x is ReadableStreamDefaultReader<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamDefaultReader;\n}\n\nexport function ReadableStreamDefaultReaderRead<R>(reader: ReadableStreamDefaultReader<R>,\n                                                   readRequest: ReadRequest<R>): void {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    readRequest._closeSteps();\n  } else if (stream._state === 'errored') {\n    readRequest._errorSteps(stream._storedError);\n  } else {\n    assert(stream._state === 'readable');\n    stream._readableStreamController[PullSteps](readRequest as ReadRequest<any>);\n  }\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nfunction defaultReaderBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n}\n","/// <reference lib=\"es2018.asynciterable\" />\n\nexport let AsyncIteratorPrototype: AsyncIterable<any> | undefined;\n\nif (typeof Symbol.asyncIterator === 'symbol') {\n  // We're running inside a ES2018+ environment, but we're compiling to an older syntax.\n  // We cannot access %AsyncIteratorPrototype% without non-ES2018 syntax, but we can re-create it.\n  AsyncIteratorPrototype = {\n    // 25.1.3.1 %AsyncIteratorPrototype% [ @@asyncIterator ] ( )\n    // https://tc39.github.io/ecma262/#sec-asynciteratorprototype-asynciterator\n    [Symbol.asyncIterator](this: AsyncIterator<any>) {\n      return this;\n    }\n  };\n  Object.defineProperty(AsyncIteratorPrototype, Symbol.asyncIterator, { enumerable: false });\n}\n","/// <reference lib=\"es2018.asynciterable\" />\n\nimport { ReadableStream } from '../readable-stream';\nimport {\n  AcquireReadableStreamDefaultReader,\n  ReadableStreamDefaultReader,\n  ReadableStreamDefaultReaderRead,\n  ReadableStreamDefaultReadResult,\n  ReadRequest\n} from './default-reader';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport assert from '../../stub/assert';\nimport { AsyncIteratorPrototype } from '@@target/stub/async-iterator-prototype';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport {\n  newPromise,\n  promiseRejectedWith,\n  promiseResolvedWith,\n  queueMicrotask,\n  transformPromiseWith\n} from '../helpers/webidl';\n\n/**\n * An async iterator returned by {@link ReadableStream.values}.\n *\n * @public\n */\nexport interface ReadableStreamAsyncIterator<R> extends AsyncIterator<R> {\n  next(): Promise<IteratorResult<R, undefined>>;\n\n  return(value?: any): Promise<IteratorResult<any>>;\n}\n\nexport class ReadableStreamAsyncIteratorImpl<R> {\n  private readonly _reader: ReadableStreamDefaultReader<R>;\n  private readonly _preventCancel: boolean;\n  private _ongoingPromise: Promise<ReadableStreamDefaultReadResult<R>> | undefined = undefined;\n  private _isFinished = false;\n\n  constructor(reader: ReadableStreamDefaultReader<R>, preventCancel: boolean) {\n    this._reader = reader;\n    this._preventCancel = preventCancel;\n  }\n\n  next(): Promise<ReadableStreamDefaultReadResult<R>> {\n    const nextSteps = () => this._nextSteps();\n    this._ongoingPromise = this._ongoingPromise ?\n      transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) :\n      nextSteps();\n    return this._ongoingPromise;\n  }\n\n  return(value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    const returnSteps = () => this._returnSteps(value);\n    return this._ongoingPromise ?\n      transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) :\n      returnSteps();\n  }\n\n  private _nextSteps(): Promise<ReadableStreamDefaultReadResult<R>> {\n    if (this._isFinished) {\n      return Promise.resolve({ value: undefined, done: true });\n    }\n\n    const reader = this._reader;\n    if (reader._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('iterate'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamDefaultReadResult<R>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamDefaultReadResult<R>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => {\n        this._ongoingPromise = undefined;\n        // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n        // FIXME Is this a bug in the specification, or in the test?\n        queueMicrotask(() => resolvePromise({ value: chunk, done: false }));\n      },\n      _closeSteps: () => {\n        this._ongoingPromise = undefined;\n        this._isFinished = true;\n        ReadableStreamReaderGenericRelease(reader);\n        resolvePromise({ value: undefined, done: true });\n      },\n      _errorSteps: reason => {\n        this._ongoingPromise = undefined;\n        this._isFinished = true;\n        ReadableStreamReaderGenericRelease(reader);\n        rejectPromise(reason);\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n    return promise;\n  }\n\n  private _returnSteps(value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (this._isFinished) {\n      return Promise.resolve({ value, done: true });\n    }\n    this._isFinished = true;\n\n    const reader = this._reader;\n    if (reader._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('finish iterating'));\n    }\n\n    assert(reader._readRequests.length === 0);\n\n    if (!this._preventCancel) {\n      const result = ReadableStreamReaderGenericCancel(reader, value);\n      ReadableStreamReaderGenericRelease(reader);\n      return transformPromiseWith(result, () => ({ value, done: true }));\n    }\n\n    ReadableStreamReaderGenericRelease(reader);\n    return promiseResolvedWith({ value, done: true });\n  }\n}\n\ndeclare class ReadableStreamAsyncIteratorInstance<R> implements ReadableStreamAsyncIterator<R> {\n  /** @interal */\n  _asyncIteratorImpl: ReadableStreamAsyncIteratorImpl<R>;\n\n  next(): Promise<IteratorResult<R, undefined>>;\n\n  return(value?: any): Promise<IteratorResult<any>>;\n}\n\nconst ReadableStreamAsyncIteratorPrototype: ReadableStreamAsyncIteratorInstance<any> = {\n  next(this: ReadableStreamAsyncIteratorInstance<any>): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (!IsReadableStreamAsyncIterator(this)) {\n      return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n    }\n    return this._asyncIteratorImpl.next();\n  },\n\n  return(this: ReadableStreamAsyncIteratorInstance<any>, value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (!IsReadableStreamAsyncIterator(this)) {\n      return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n    }\n    return this._asyncIteratorImpl.return(value);\n  }\n} as any;\nif (AsyncIteratorPrototype !== undefined) {\n  Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n}\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamAsyncIterator<R>(stream: ReadableStream<R>,\n                                                      preventCancel: boolean): ReadableStreamAsyncIterator<R> {\n  const reader = AcquireReadableStreamDefaultReader<R>(stream);\n  const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n  const iterator: ReadableStreamAsyncIteratorInstance<R> = Object.create(ReadableStreamAsyncIteratorPrototype);\n  iterator._asyncIteratorImpl = impl;\n  return iterator;\n}\n\nfunction IsReadableStreamAsyncIterator<R = any>(x: any): x is ReadableStreamAsyncIterator<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n    return false;\n  }\n\n  try {\n    // noinspection SuspiciousTypeOfGuard\n    return (x as ReadableStreamAsyncIteratorInstance<any>)._asyncIteratorImpl instanceof\n      ReadableStreamAsyncIteratorImpl;\n  } catch {\n    return false;\n  }\n}\n\n// Helper functions for the ReadableStream.\n\nfunction streamAsyncIteratorBrandCheckException(name: string): TypeError {\n  return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\n}\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\nconst NumberIsNaN: typeof Number.isNaN = Number.isNaN || function (x) {\n  // eslint-disable-next-line no-self-compare\n  return x !== x;\n};\n\nexport default NumberIsNaN;\n","export function CreateArrayFromList<T extends any[]>(elements: T): T {\n  // We use arrays to represent lists, so this is basically a no-op.\n  // Do a slice though just in case we happen to depend on the unique-ness.\n  return elements.slice() as T;\n}\n\nexport function CopyDataBlockBytes(dest: ArrayBuffer,\n                                   destOffset: number,\n                                   src: ArrayBuffer,\n                                   srcOffset: number,\n                                   n: number) {\n  new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n}\n\n// Not implemented correctly\nexport function TransferArrayBuffer<T extends ArrayBufferLike>(O: T): T {\n  return O;\n}\n\n// Not implemented correctly\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function CanTransferArrayBuffer(O: ArrayBufferLike): boolean {\n  return true;\n}\n\n// Not implemented correctly\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function IsDetachedBuffer(O: ArrayBufferLike): boolean {\n  return false;\n}\n\nexport function ArrayBufferSlice(buffer: ArrayBufferLike, begin: number, end: number): ArrayBufferLike {\n  // ArrayBuffer.prototype.slice is not available on IE10\n  // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n  if (buffer.slice) {\n    return buffer.slice(begin, end);\n  }\n  const length = end - begin;\n  const slice = new ArrayBuffer(length);\n  CopyDataBlockBytes(slice, 0, buffer, begin, length);\n  return slice;\n}\n","import NumberIsNaN from '../../stub/number-isnan';\nimport { ArrayBufferSlice } from './ecmascript';\n\nexport function IsNonNegativeNumber(v: number): boolean {\n  if (typeof v !== 'number') {\n    return false;\n  }\n\n  if (NumberIsNaN(v)) {\n    return false;\n  }\n\n  if (v < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function CloneAsUint8Array(O: ArrayBufferView): Uint8Array {\n  const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n  return new Uint8Array(buffer);\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport { IsNonNegativeNumber } from './miscellaneous';\n\nexport interface QueueContainer<T> {\n  _queue: SimpleQueue<T>;\n  _queueTotalSize: number;\n}\n\nexport interface QueuePair<T> {\n  value: T;\n  size: number;\n}\n\nexport function DequeueValue<T>(container: QueueContainer<QueuePair<T>>): T {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.shift()!;\n  container._queueTotalSize -= pair.size;\n  if (container._queueTotalSize < 0) {\n    container._queueTotalSize = 0;\n  }\n\n  return pair.value;\n}\n\nexport function EnqueueValueWithSize<T>(container: QueueContainer<QueuePair<T>>, value: T, size: number) {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  if (!IsNonNegativeNumber(size) || size === Infinity) {\n    throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n  }\n\n  container._queue.push({ value, size });\n  container._queueTotalSize += size;\n}\n\nexport function PeekQueueValue<T>(container: QueueContainer<QueuePair<T>>): T {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.peek();\n  return pair.value;\n}\n\nexport function ResetQueue<T>(container: QueueContainer<T>) {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  container._queue = new SimpleQueue<T>();\n  container._queueTotalSize = 0;\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport { ResetQueue } from '../abstract-ops/queue-with-sizes';\nimport {\n  ReadableStreamAddReadRequest,\n  ReadableStreamFulfillReadRequest,\n  ReadableStreamGetNumReadRequests,\n  ReadableStreamHasDefaultReader,\n  ReadRequest\n} from './default-reader';\nimport {\n  ReadableStreamAddReadIntoRequest,\n  ReadableStreamFulfillReadIntoRequest,\n  ReadableStreamGetNumReadIntoRequests,\n  ReadableStreamHasBYOBReader,\n  ReadIntoRequest\n} from './byob-reader';\nimport NumberIsInteger from '../../stub/number-isinteger';\nimport {\n  IsReadableStreamLocked,\n  ReadableByteStream,\n  ReadableStreamClose,\n  ReadableStreamError\n} from '../readable-stream';\nimport { ValidatedUnderlyingByteSource } from './underlying-source';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport {\n  ArrayBufferSlice,\n  CanTransferArrayBuffer,\n  CopyDataBlockBytes,\n  IsDetachedBuffer,\n  TransferArrayBuffer\n} from '../abstract-ops/ecmascript';\nimport { CancelSteps, PullSteps } from '../abstract-ops/internal-methods';\nimport { promiseResolvedWith, uponPromise } from '../helpers/webidl';\nimport { assertRequiredArgument, convertUnsignedLongLongWithEnforceRange } from '../validators/basic';\n\n/**\n * A pull-into request in a {@link ReadableByteStreamController}.\n *\n * @public\n */\nexport class ReadableStreamBYOBRequest {\n  /** @internal */\n  _associatedReadableByteStreamController!: ReadableByteStreamController;\n  /** @internal */\n  _view!: ArrayBufferView | null;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n   */\n  get view(): ArrayBufferView | null {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('view');\n    }\n\n    return this._view;\n  }\n\n  /**\n   * Indicates to the associated readable byte stream that `bytesWritten` bytes were written into\n   * {@link ReadableStreamBYOBRequest.view | view}, causing the result be surfaced to the consumer.\n   *\n   * After this method is called, {@link ReadableStreamBYOBRequest.view | view} will be transferred and no longer\n   * modifiable.\n   */\n  respond(bytesWritten: number): void;\n  respond(bytesWritten: number | undefined): void {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('respond');\n    }\n    assertRequiredArgument(bytesWritten, 1, 'respond');\n    bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(this._view!.buffer)) {\n      throw new TypeError(`The BYOB request's buffer has been detached and so cannot be used as a response`);\n    }\n\n    assert(this._view!.byteLength > 0);\n    assert(this._view!.buffer.byteLength > 0);\n\n    ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n  }\n\n  /**\n   * Indicates to the associated readable byte stream that instead of writing into\n   * {@link ReadableStreamBYOBRequest.view | view}, the underlying byte source is providing a new `ArrayBufferView`,\n   * which will be given to the consumer of the readable byte stream.\n   *\n   * After this method is called, `view` will be transferred and no longer modifiable.\n   */\n  respondWithNewView(view: ArrayBufferView): void;\n  respondWithNewView(view: ArrayBufferView | undefined): void {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('respondWithNewView');\n    }\n    assertRequiredArgument(view, 1, 'respondWithNewView');\n\n    if (!ArrayBuffer.isView(view)) {\n      throw new TypeError('You can only respond with array buffer views');\n    }\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(view.buffer)) {\n      throw new TypeError('The given view\\'s buffer has been detached and so cannot be used as a response');\n    }\n\n    ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n  }\n}\n\nObject.defineProperties(ReadableStreamBYOBRequest.prototype, {\n  respond: { enumerable: true },\n  respondWithNewView: { enumerable: true },\n  view: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBRequest.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamBYOBRequest',\n    configurable: true\n  });\n}\n\ninterface ArrayBufferViewConstructor<T extends ArrayBufferView = ArrayBufferView> {\n  new(buffer: ArrayBufferLike, byteOffset: number, length?: number): T;\n\n  readonly prototype: T;\n  readonly BYTES_PER_ELEMENT: number;\n}\n\ninterface ByteQueueElement {\n  buffer: ArrayBufferLike;\n  byteOffset: number;\n  byteLength: number;\n}\n\ntype PullIntoDescriptor<T extends ArrayBufferView = ArrayBufferView> =\n  DefaultPullIntoDescriptor\n  | BYOBPullIntoDescriptor<T>;\n\ninterface DefaultPullIntoDescriptor {\n  buffer: ArrayBufferLike;\n  bufferByteLength: number;\n  byteOffset: number;\n  byteLength: number;\n  bytesFilled: number;\n  elementSize: number;\n  viewConstructor: ArrayBufferViewConstructor<Uint8Array>;\n  readerType: 'default';\n}\n\ninterface BYOBPullIntoDescriptor<T extends ArrayBufferView = ArrayBufferView> {\n  buffer: ArrayBufferLike;\n  bufferByteLength: number;\n  byteOffset: number;\n  byteLength: number;\n  bytesFilled: number;\n  elementSize: number;\n  viewConstructor: ArrayBufferViewConstructor<T>;\n  readerType: 'byob';\n}\n\n/**\n * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n *\n * @public\n */\nexport class ReadableByteStreamController {\n  /** @internal */\n  _controlledReadableByteStream!: ReadableByteStream;\n  /** @internal */\n  _queue!: SimpleQueue<ByteQueueElement>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _closeRequested!: boolean;\n  /** @internal */\n  _pullAgain!: boolean;\n  /** @internal */\n  _pulling !: boolean;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _pullAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _cancelAlgorithm!: (reason: any) => Promise<void>;\n  /** @internal */\n  _autoAllocateChunkSize: number | undefined;\n  /** @internal */\n  _byobRequest: ReadableStreamBYOBRequest | null;\n  /** @internal */\n  _pendingPullIntos!: SimpleQueue<PullIntoDescriptor>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the current BYOB pull request, or `null` if there isn't one.\n   */\n  get byobRequest(): ReadableStreamBYOBRequest | null {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('byobRequest');\n    }\n\n    return ReadableByteStreamControllerGetBYOBRequest(this);\n  }\n\n  /**\n   * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n   * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n   */\n  get desiredSize(): number | null {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableByteStreamControllerGetDesiredSize(this);\n  }\n\n  /**\n   * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n   * the stream, but once those are read, the stream will become closed.\n   */\n  close(): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('close');\n    }\n\n    if (this._closeRequested) {\n      throw new TypeError('The stream has already been closed; do not close it again!');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n    }\n\n    ReadableByteStreamControllerClose(this);\n  }\n\n  /**\n   * Enqueues the given chunk chunk in the controlled readable stream.\n   * The chunk has to be an `ArrayBufferView` instance, or else a `TypeError` will be thrown.\n   */\n  enqueue(chunk: ArrayBufferView): void;\n  enqueue(chunk: ArrayBufferView | undefined): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('enqueue');\n    }\n\n    assertRequiredArgument(chunk, 1, 'enqueue');\n    if (!ArrayBuffer.isView(chunk)) {\n      throw new TypeError('chunk must be an array buffer view');\n    }\n    if (chunk.byteLength === 0) {\n      throw new TypeError('chunk must have non-zero byteLength');\n    }\n    if (chunk.buffer.byteLength === 0) {\n      throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n    }\n\n    if (this._closeRequested) {\n      throw new TypeError('stream is closed or draining');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n    }\n\n    ReadableByteStreamControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n   */\n  error(e: any = undefined): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('error');\n    }\n\n    ReadableByteStreamControllerError(this, e);\n  }\n\n  /** @internal */\n  [CancelSteps](reason: any): Promise<void> {\n    ReadableByteStreamControllerClearPendingPullIntos(this);\n\n    ResetQueue(this);\n\n    const result = this._cancelAlgorithm(reason);\n    ReadableByteStreamControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [PullSteps](readRequest: ReadRequest<Uint8Array>): void {\n    const stream = this._controlledReadableByteStream;\n    assert(ReadableStreamHasDefaultReader(stream));\n\n    if (this._queueTotalSize > 0) {\n      assert(ReadableStreamGetNumReadRequests(stream) === 0);\n\n      const entry = this._queue.shift()!;\n      this._queueTotalSize -= entry.byteLength;\n\n      ReadableByteStreamControllerHandleQueueDrain(this);\n\n      const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n\n      readRequest._chunkSteps(view);\n      return;\n    }\n\n    const autoAllocateChunkSize = this._autoAllocateChunkSize;\n    if (autoAllocateChunkSize !== undefined) {\n      let buffer: ArrayBuffer;\n      try {\n        buffer = new ArrayBuffer(autoAllocateChunkSize);\n      } catch (bufferE) {\n        readRequest._errorSteps(bufferE);\n        return;\n      }\n\n      const pullIntoDescriptor: DefaultPullIntoDescriptor = {\n        buffer,\n        bufferByteLength: autoAllocateChunkSize,\n        byteOffset: 0,\n        byteLength: autoAllocateChunkSize,\n        bytesFilled: 0,\n        elementSize: 1,\n        viewConstructor: Uint8Array,\n        readerType: 'default'\n      };\n\n      this._pendingPullIntos.push(pullIntoDescriptor);\n    }\n\n    ReadableStreamAddReadRequest(stream, readRequest);\n    ReadableByteStreamControllerCallPullIfNeeded(this);\n  }\n}\n\nObject.defineProperties(ReadableByteStreamController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  byobRequest: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableByteStreamController.prototype, Symbol.toStringTag, {\n    value: 'ReadableByteStreamController',\n    configurable: true\n  });\n}\n\n// Abstract operations for the ReadableByteStreamController.\n\nexport function IsReadableByteStreamController(x: any): x is ReadableByteStreamController {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n    return false;\n  }\n\n  return x instanceof ReadableByteStreamController;\n}\n\nfunction IsReadableStreamBYOBRequest(x: any): x is ReadableStreamBYOBRequest {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamBYOBRequest;\n}\n\nfunction ReadableByteStreamControllerCallPullIfNeeded(controller: ReadableByteStreamController): void {\n  const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n  if (!shouldPull) {\n    return;\n  }\n\n  if (controller._pulling) {\n    controller._pullAgain = true;\n    return;\n  }\n\n  assert(!controller._pullAgain);\n\n  controller._pulling = true;\n\n  // TODO: Test controller argument\n  const pullPromise = controller._pullAlgorithm();\n  uponPromise(\n    pullPromise,\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      }\n    },\n    e => {\n      ReadableByteStreamControllerError(controller, e);\n    }\n  );\n}\n\nfunction ReadableByteStreamControllerClearPendingPullIntos(controller: ReadableByteStreamController) {\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  controller._pendingPullIntos = new SimpleQueue();\n}\n\nfunction ReadableByteStreamControllerCommitPullIntoDescriptor<T extends ArrayBufferView>(\n  stream: ReadableByteStream,\n  pullIntoDescriptor: PullIntoDescriptor<T>\n) {\n  assert(stream._state !== 'errored');\n\n  let done = false;\n  if (stream._state === 'closed') {\n    assert(pullIntoDescriptor.bytesFilled === 0);\n    done = true;\n  }\n\n  const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor<T>(pullIntoDescriptor);\n  if (pullIntoDescriptor.readerType === 'default') {\n    ReadableStreamFulfillReadRequest(stream, filledView as unknown as Uint8Array, done);\n  } else {\n    assert(pullIntoDescriptor.readerType === 'byob');\n    ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n  }\n}\n\nfunction ReadableByteStreamControllerConvertPullIntoDescriptor<T extends ArrayBufferView>(\n  pullIntoDescriptor: PullIntoDescriptor<T>\n): T {\n  const bytesFilled = pullIntoDescriptor.bytesFilled;\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  assert(bytesFilled <= pullIntoDescriptor.byteLength);\n  assert(bytesFilled % elementSize === 0);\n\n  return new pullIntoDescriptor.viewConstructor(\n    pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize) as T;\n}\n\nfunction ReadableByteStreamControllerEnqueueChunkToQueue(controller: ReadableByteStreamController,\n                                                         buffer: ArrayBufferLike,\n                                                         byteOffset: number,\n                                                         byteLength: number) {\n  controller._queue.push({ buffer, byteOffset, byteLength });\n  controller._queueTotalSize += byteLength;\n}\n\nfunction ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller: ReadableByteStreamController,\n                                                                     pullIntoDescriptor: PullIntoDescriptor) {\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n\n  const maxBytesToCopy = Math.min(controller._queueTotalSize,\n                                  pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n  const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n  const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n\n  let totalBytesToCopyRemaining = maxBytesToCopy;\n  let ready = false;\n  if (maxAlignedBytes > currentAlignedBytes) {\n    totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n    ready = true;\n  }\n\n  const queue = controller._queue;\n\n  while (totalBytesToCopyRemaining > 0) {\n    const headOfQueue = queue.peek();\n\n    const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n\n    const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n\n    if (headOfQueue.byteLength === bytesToCopy) {\n      queue.shift();\n    } else {\n      headOfQueue.byteOffset += bytesToCopy;\n      headOfQueue.byteLength -= bytesToCopy;\n    }\n    controller._queueTotalSize -= bytesToCopy;\n\n    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n\n    totalBytesToCopyRemaining -= bytesToCopy;\n  }\n\n  if (!ready) {\n    assert(controller._queueTotalSize === 0);\n    assert(pullIntoDescriptor.bytesFilled > 0);\n    assert(pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize);\n  }\n\n  return ready;\n}\n\nfunction ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller: ReadableByteStreamController,\n                                                                size: number,\n                                                                pullIntoDescriptor: PullIntoDescriptor) {\n  assert(controller._pendingPullIntos.length === 0 || controller._pendingPullIntos.peek() === pullIntoDescriptor);\n  assert(controller._byobRequest === null);\n  pullIntoDescriptor.bytesFilled += size;\n}\n\nfunction ReadableByteStreamControllerHandleQueueDrain(controller: ReadableByteStreamController) {\n  assert(controller._controlledReadableByteStream._state === 'readable');\n\n  if (controller._queueTotalSize === 0 && controller._closeRequested) {\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamClose(controller._controlledReadableByteStream);\n  } else {\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n}\n\nfunction ReadableByteStreamControllerInvalidateBYOBRequest(controller: ReadableByteStreamController) {\n  if (controller._byobRequest === null) {\n    return;\n  }\n\n  controller._byobRequest._associatedReadableByteStreamController = undefined!;\n  controller._byobRequest._view = null!;\n  controller._byobRequest = null;\n}\n\nfunction ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller: ReadableByteStreamController) {\n  assert(!controller._closeRequested);\n\n  while (controller._pendingPullIntos.length > 0) {\n    if (controller._queueTotalSize === 0) {\n      return;\n    }\n\n    const pullIntoDescriptor = controller._pendingPullIntos.peek();\n\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n      ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n      ReadableByteStreamControllerCommitPullIntoDescriptor(\n        controller._controlledReadableByteStream,\n        pullIntoDescriptor\n      );\n    }\n  }\n}\n\nexport function ReadableByteStreamControllerPullInto<T extends ArrayBufferView>(\n  controller: ReadableByteStreamController,\n  view: T,\n  readIntoRequest: ReadIntoRequest<T>\n): void {\n  const stream = controller._controlledReadableByteStream;\n\n  let elementSize = 1;\n  if (view.constructor !== DataView) {\n    elementSize = (view.constructor as ArrayBufferViewConstructor<T>).BYTES_PER_ELEMENT;\n  }\n\n  const ctor = view.constructor as ArrayBufferViewConstructor<T>;\n\n  // try {\n  const buffer = TransferArrayBuffer(view.buffer);\n  // } catch (e) {\n  //   readIntoRequest._errorSteps(e);\n  //   return;\n  // }\n\n  const pullIntoDescriptor: BYOBPullIntoDescriptor<T> = {\n    buffer,\n    bufferByteLength: buffer.byteLength,\n    byteOffset: view.byteOffset,\n    byteLength: view.byteLength,\n    bytesFilled: 0,\n    elementSize,\n    viewConstructor: ctor,\n    readerType: 'byob'\n  };\n\n  if (controller._pendingPullIntos.length > 0) {\n    controller._pendingPullIntos.push(pullIntoDescriptor);\n\n    // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n    // - No change happens on desiredSize\n    // - The source has already been notified of that there's at least 1 pending read(view)\n\n    ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n    return;\n  }\n\n  if (stream._state === 'closed') {\n    const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n    readIntoRequest._closeSteps(emptyView);\n    return;\n  }\n\n  if (controller._queueTotalSize > 0) {\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n      const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor<T>(pullIntoDescriptor);\n\n      ReadableByteStreamControllerHandleQueueDrain(controller);\n\n      readIntoRequest._chunkSteps(filledView);\n      return;\n    }\n\n    if (controller._closeRequested) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      readIntoRequest._errorSteps(e);\n      return;\n    }\n  }\n\n  controller._pendingPullIntos.push(pullIntoDescriptor);\n\n  ReadableStreamAddReadIntoRequest<T>(stream, readIntoRequest);\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInClosedState(controller: ReadableByteStreamController,\n                                                          firstDescriptor: PullIntoDescriptor) {\n  assert(firstDescriptor.bytesFilled === 0);\n\n  const stream = controller._controlledReadableByteStream;\n  if (ReadableStreamHasBYOBReader(stream)) {\n    while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n      const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n      ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n    }\n  }\n}\n\nfunction ReadableByteStreamControllerRespondInReadableState(controller: ReadableByteStreamController,\n                                                            bytesWritten: number,\n                                                            pullIntoDescriptor: PullIntoDescriptor) {\n  assert(pullIntoDescriptor.bytesFilled + bytesWritten <= pullIntoDescriptor.byteLength);\n\n  ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n\n  if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n    return;\n  }\n\n  ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n  const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n  if (remainderSize > 0) {\n    const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n  }\n\n  pullIntoDescriptor.bytesFilled -= remainderSize;\n  ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n\n  ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInternal(controller: ReadableByteStreamController, bytesWritten: number) {\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  assert(CanTransferArrayBuffer(firstDescriptor.buffer));\n\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\n  const state = controller._controlledReadableByteStream._state;\n  if (state === 'closed') {\n    assert(bytesWritten === 0);\n    ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);\n  } else {\n    assert(state === 'readable');\n    assert(bytesWritten > 0);\n    ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerShiftPendingPullInto(\n  controller: ReadableByteStreamController\n): PullIntoDescriptor {\n  assert(controller._byobRequest === null);\n  const descriptor = controller._pendingPullIntos.shift()!;\n  return descriptor;\n}\n\nfunction ReadableByteStreamControllerShouldCallPull(controller: ReadableByteStreamController): boolean {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return false;\n  }\n\n  if (controller._closeRequested) {\n    return false;\n  }\n\n  if (!controller._started) {\n    return false;\n  }\n\n  if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize! > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableByteStreamControllerClearAlgorithms(controller: ReadableByteStreamController) {\n  controller._pullAlgorithm = undefined!;\n  controller._cancelAlgorithm = undefined!;\n}\n\n// A client of ReadableByteStreamController may use these functions directly to bypass state check.\n\nexport function ReadableByteStreamControllerClose(controller: ReadableByteStreamController) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (controller._closeRequested || stream._state !== 'readable') {\n    return;\n  }\n\n  if (controller._queueTotalSize > 0) {\n    controller._closeRequested = true;\n\n    return;\n  }\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos.peek();\n    if (firstPendingPullInto.bytesFilled > 0) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      throw e;\n    }\n  }\n\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamClose(stream);\n}\n\nexport function ReadableByteStreamControllerEnqueue(controller: ReadableByteStreamController, chunk: ArrayBufferView) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (controller._closeRequested || stream._state !== 'readable') {\n    return;\n  }\n\n  const buffer = chunk.buffer;\n  const byteOffset = chunk.byteOffset;\n  const byteLength = chunk.byteLength;\n  if (IsDetachedBuffer(buffer)) {\n    throw new TypeError('chunk\\'s buffer is detached and so cannot be enqueued');\n  }\n  const transferredBuffer = TransferArrayBuffer(buffer);\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos.peek();\n    if (IsDetachedBuffer(firstPendingPullInto.buffer)) {\n      throw new TypeError(\n        'The BYOB request\\'s buffer has been detached and so cannot be filled with an enqueued chunk'\n      );\n    }\n    firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n  }\n\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\n  if (ReadableStreamHasDefaultReader(stream)) {\n    if (ReadableStreamGetNumReadRequests(stream) === 0) {\n      assert(controller._pendingPullIntos.length === 0);\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    } else {\n      assert(controller._queue.length === 0);\n      if (controller._pendingPullIntos.length > 0) {\n        assert(controller._pendingPullIntos.peek().readerType === 'default');\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\n      }\n      const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n      ReadableStreamFulfillReadRequest(stream, transferredView, false);\n    }\n  } else if (ReadableStreamHasBYOBReader(stream)) {\n    // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n  } else {\n    assert(!IsReadableStreamLocked(stream));\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nexport function ReadableByteStreamControllerError(controller: ReadableByteStreamController, e: any) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ReadableByteStreamControllerClearPendingPullIntos(controller);\n\n  ResetQueue(controller);\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nexport function ReadableByteStreamControllerGetBYOBRequest(\n  controller: ReadableByteStreamController\n): ReadableStreamBYOBRequest | null {\n  if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n    const firstDescriptor = controller._pendingPullIntos.peek();\n    const view = new Uint8Array(firstDescriptor.buffer,\n                                firstDescriptor.byteOffset + firstDescriptor.bytesFilled,\n                                firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n\n    const byobRequest: ReadableStreamBYOBRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n    SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n    controller._byobRequest = byobRequest;\n  }\n  return controller._byobRequest;\n}\n\nfunction ReadableByteStreamControllerGetDesiredSize(controller: ReadableByteStreamController): number | null {\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nexport function ReadableByteStreamControllerRespond(controller: ReadableByteStreamController, bytesWritten: number) {\n  assert(controller._pendingPullIntos.length > 0);\n\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'closed') {\n    if (bytesWritten !== 0) {\n      throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n    }\n  } else {\n    assert(state === 'readable');\n    if (bytesWritten === 0) {\n      throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');\n    }\n    if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n      throw new RangeError('bytesWritten out of range');\n    }\n  }\n\n  firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n\n  ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n}\n\nexport function ReadableByteStreamControllerRespondWithNewView(controller: ReadableByteStreamController,\n                                                               view: ArrayBufferView) {\n  assert(controller._pendingPullIntos.length > 0);\n  assert(!IsDetachedBuffer(view.buffer));\n\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'closed') {\n    if (view.byteLength !== 0) {\n      throw new TypeError('The view\\'s length must be 0 when calling respondWithNewView() on a closed stream');\n    }\n  } else {\n    assert(state === 'readable');\n    if (view.byteLength === 0) {\n      throw new TypeError(\n        'The view\\'s length must be greater than 0 when calling respondWithNewView() on a readable stream'\n      );\n    }\n  }\n\n  if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n    throw new RangeError('The region specified by view does not match byobRequest');\n  }\n  if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n    throw new RangeError('The buffer of view has different capacity than byobRequest');\n  }\n  if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n    throw new RangeError('The region specified by view is larger than byobRequest');\n  }\n\n  const viewByteLength = view.byteLength;\n  firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n  ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n}\n\nexport function SetUpReadableByteStreamController(stream: ReadableByteStream,\n                                                  controller: ReadableByteStreamController,\n                                                  startAlgorithm: () => void | PromiseLike<void>,\n                                                  pullAlgorithm: () => Promise<void>,\n                                                  cancelAlgorithm: (reason: any) => Promise<void>,\n                                                  highWaterMark: number,\n                                                  autoAllocateChunkSize: number | undefined) {\n  assert(stream._readableStreamController === undefined);\n  if (autoAllocateChunkSize !== undefined) {\n    assert(NumberIsInteger(autoAllocateChunkSize));\n    assert(autoAllocateChunkSize > 0);\n  }\n\n  controller._controlledReadableByteStream = stream;\n\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._byobRequest = null;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._closeRequested = false;\n  controller._started = false;\n\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  controller._autoAllocateChunkSize = autoAllocateChunkSize;\n\n  controller._pendingPullIntos = new SimpleQueue();\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  uponPromise(\n    promiseResolvedWith(startResult),\n    () => {\n      controller._started = true;\n\n      assert(!controller._pulling);\n      assert(!controller._pullAgain);\n\n      ReadableByteStreamControllerCallPullIfNeeded(controller);\n    },\n    r => {\n      ReadableByteStreamControllerError(controller, r);\n    }\n  );\n}\n\nexport function SetUpReadableByteStreamControllerFromUnderlyingSource(\n  stream: ReadableByteStream,\n  underlyingByteSource: ValidatedUnderlyingByteSource,\n  highWaterMark: number\n) {\n  const controller: ReadableByteStreamController = Object.create(ReadableByteStreamController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let pullAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let cancelAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingByteSource.start !== undefined) {\n    startAlgorithm = () => underlyingByteSource.start!(controller);\n  }\n  if (underlyingByteSource.pull !== undefined) {\n    pullAlgorithm = () => underlyingByteSource.pull!(controller);\n  }\n  if (underlyingByteSource.cancel !== undefined) {\n    cancelAlgorithm = reason => underlyingByteSource.cancel!(reason);\n  }\n\n  const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n  if (autoAllocateChunkSize === 0) {\n    throw new TypeError('autoAllocateChunkSize must be greater than 0');\n  }\n\n  SetUpReadableByteStreamController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize\n  );\n}\n\nfunction SetUpReadableStreamBYOBRequest(request: ReadableStreamBYOBRequest,\n                                        controller: ReadableByteStreamController,\n                                        view: ArrayBufferView) {\n  assert(IsReadableByteStreamController(controller));\n  assert(typeof view === 'object');\n  assert(ArrayBuffer.isView(view));\n  assert(!IsDetachedBuffer(view.buffer));\n  request._associatedReadableByteStreamController = controller;\n  request._view = view;\n}\n\n// Helper functions for the ReadableStreamBYOBRequest.\n\nfunction byobRequestBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n}\n\n// Helper functions for the ReadableByteStreamController.\n\nfunction byteStreamControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericInitialize,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport { IsReadableStreamLocked, ReadableByteStream, ReadableStream } from '../readable-stream';\nimport {\n  IsReadableByteStreamController,\n  ReadableByteStreamController,\n  ReadableByteStreamControllerPullInto\n} from './byte-stream-controller';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { newPromise, promiseRejectedWith } from '../helpers/webidl';\nimport { assertRequiredArgument } from '../validators/basic';\nimport { assertReadableStream } from '../validators/readable-stream';\nimport { IsDetachedBuffer } from '../abstract-ops/ecmascript';\n\n/**\n * A result returned by {@link ReadableStreamBYOBReader.read}.\n *\n * @public\n */\nexport type ReadableStreamBYOBReadResult<T extends ArrayBufferView> = {\n  done: false;\n  value: T;\n} | {\n  done: true;\n  value: T | undefined;\n};\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamBYOBReader(stream: ReadableByteStream): ReadableStreamBYOBReader {\n  return new ReadableStreamBYOBReader(stream);\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamAddReadIntoRequest<T extends ArrayBufferView>(stream: ReadableByteStream,\n                                                                            readIntoRequest: ReadIntoRequest<T>): void {\n  assert(IsReadableStreamBYOBReader(stream._reader));\n  assert(stream._state === 'readable' || stream._state === 'closed');\n\n  (stream._reader! as ReadableStreamBYOBReader)._readIntoRequests.push(readIntoRequest);\n}\n\nexport function ReadableStreamFulfillReadIntoRequest(stream: ReadableByteStream,\n                                                     chunk: ArrayBufferView,\n                                                     done: boolean) {\n  const reader = stream._reader as ReadableStreamBYOBReader;\n\n  assert(reader._readIntoRequests.length > 0);\n\n  const readIntoRequest = reader._readIntoRequests.shift()!;\n  if (done) {\n    readIntoRequest._closeSteps(chunk);\n  } else {\n    readIntoRequest._chunkSteps(chunk);\n  }\n}\n\nexport function ReadableStreamGetNumReadIntoRequests(stream: ReadableByteStream): number {\n  return (stream._reader as ReadableStreamBYOBReader)._readIntoRequests.length;\n}\n\nexport function ReadableStreamHasBYOBReader(stream: ReadableByteStream): boolean {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (!IsReadableStreamBYOBReader(reader)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nexport interface ReadIntoRequest<T extends ArrayBufferView> {\n  _chunkSteps(chunk: T): void;\n\n  _closeSteps(chunk: T | undefined): void;\n\n  _errorSteps(e: any): void;\n}\n\n/**\n * A BYOB reader vended by a {@link ReadableStream}.\n *\n * @public\n */\nexport class ReadableStreamBYOBReader {\n  /** @internal */\n  _ownerReadableStream!: ReadableByteStream;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readIntoRequests: SimpleQueue<ReadIntoRequest<any>>;\n\n  constructor(stream: ReadableByteStream) {\n    assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n    assertReadableStream(stream, 'First parameter');\n\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    if (!IsReadableByteStreamController(stream._readableStreamController)) {\n      throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +\n        'source');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readIntoRequests = new SimpleQueue();\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n   * the reader's lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  /**\n   * Attempts to reads bytes into view, and returns a promise resolved with the result.\n   *\n   * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n   */\n  read<T extends ArrayBufferView>(view: T): Promise<ReadableStreamBYOBReadResult<T>> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('read'));\n    }\n\n    if (!ArrayBuffer.isView(view)) {\n      return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n    }\n    if (view.byteLength === 0) {\n      return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n    }\n    if (view.buffer.byteLength === 0) {\n      return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\n    }\n    if (IsDetachedBuffer(view.buffer)) {\n      return promiseRejectedWith(new TypeError('view\\'s buffer has been detached'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('read from'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamBYOBReadResult<T>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamBYOBReadResult<T>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readIntoRequest: ReadIntoRequest<T> = {\n      _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n      _closeSteps: chunk => resolvePromise({ value: chunk, done: true }),\n      _errorSteps: e => rejectPromise(e)\n    };\n    ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n    return promise;\n  }\n\n  /**\n   * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n   * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n   * from now on; otherwise, the reader will appear closed.\n   *\n   * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n   * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n   * do so will throw a `TypeError` and leave the reader locked to the stream.\n   */\n  releaseLock(): void {\n    if (!IsReadableStreamBYOBReader(this)) {\n      throw byobReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readIntoRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\nObject.defineProperties(ReadableStreamBYOBReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBReader.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamBYOBReader',\n    configurable: true\n  });\n}\n\n// Abstract operations for the readers.\n\nexport function IsReadableStreamBYOBReader(x: any): x is ReadableStreamBYOBReader {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamBYOBReader;\n}\n\nexport function ReadableStreamBYOBReaderRead<T extends ArrayBufferView>(\n  reader: ReadableStreamBYOBReader,\n  view: T,\n  readIntoRequest: ReadIntoRequest<T>\n): void {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'errored') {\n    readIntoRequest._errorSteps(stream._storedError);\n  } else {\n    ReadableByteStreamControllerPullInto(\n      stream._readableStreamController as ReadableByteStreamController,\n      view,\n      readIntoRequest\n    );\n  }\n}\n\n// Helper functions for the ReadableStreamBYOBReader.\n\nfunction byobReaderBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n}\n","import { QueuingStrategy, QueuingStrategySizeCallback } from '../queuing-strategy';\nimport NumberIsNaN from '../../stub/number-isnan';\n\nexport function ExtractHighWaterMark(strategy: QueuingStrategy, defaultHWM: number): number {\n  const { highWaterMark } = strategy;\n\n  if (highWaterMark === undefined) {\n    return defaultHWM;\n  }\n\n  if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n    throw new RangeError('Invalid highWaterMark');\n  }\n\n  return highWaterMark;\n}\n\nexport function ExtractSizeAlgorithm<T>(strategy: QueuingStrategy<T>): QueuingStrategySizeCallback<T> {\n  const { size } = strategy;\n\n  if (!size) {\n    return () => 1;\n  }\n\n  return size;\n}\n","import { QueuingStrategy, QueuingStrategySizeCallback } from '../queuing-strategy';\nimport { assertDictionary, assertFunction, convertUnrestrictedDouble } from './basic';\n\nexport function convertQueuingStrategy<T>(init: QueuingStrategy<T> | null | undefined,\n                                          context: string): QueuingStrategy<T> {\n  assertDictionary(init, context);\n  const highWaterMark = init?.highWaterMark;\n  const size = init?.size;\n  return {\n    highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n    size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)\n  };\n}\n\nfunction convertQueuingStrategySize<T>(fn: QueuingStrategySizeCallback<T>,\n                                       context: string): QueuingStrategySizeCallback<T> {\n  assertFunction(fn, context);\n  return chunk => convertUnrestrictedDouble(fn(chunk));\n}\n","import { assertDictionary, assertFunction } from './basic';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\nimport {\n  UnderlyingSink,\n  UnderlyingSinkAbortCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  ValidatedUnderlyingSink\n} from '../writable-stream/underlying-sink';\nimport { WritableStreamDefaultController } from '../writable-stream';\n\nexport function convertUnderlyingSink<W>(original: UnderlyingSink<W> | null,\n                                         context: string): ValidatedUnderlyingSink<W> {\n  assertDictionary(original, context);\n  const abort = original?.abort;\n  const close = original?.close;\n  const start = original?.start;\n  const type = original?.type;\n  const write = original?.write;\n  return {\n    abort: abort === undefined ?\n      undefined :\n      convertUnderlyingSinkAbortCallback(abort, original!, `${context} has member 'abort' that`),\n    close: close === undefined ?\n      undefined :\n      convertUnderlyingSinkCloseCallback(close, original!, `${context} has member 'close' that`),\n    start: start === undefined ?\n      undefined :\n      convertUnderlyingSinkStartCallback(start, original!, `${context} has member 'start' that`),\n    write: write === undefined ?\n      undefined :\n      convertUnderlyingSinkWriteCallback(write, original!, `${context} has member 'write' that`),\n    type\n  };\n}\n\nfunction convertUnderlyingSinkAbortCallback(\n  fn: UnderlyingSinkAbortCallback,\n  original: UnderlyingSink,\n  context: string\n): (reason: any) => Promise<void> {\n  assertFunction(fn, context);\n  return (reason: any) => promiseCall(fn, original, [reason]);\n}\n\nfunction convertUnderlyingSinkCloseCallback(\n  fn: UnderlyingSinkCloseCallback,\n  original: UnderlyingSink,\n  context: string\n): () => Promise<void> {\n  assertFunction(fn, context);\n  return () => promiseCall(fn, original, []);\n}\n\nfunction convertUnderlyingSinkStartCallback(\n  fn: UnderlyingSinkStartCallback,\n  original: UnderlyingSink,\n  context: string\n): UnderlyingSinkStartCallback {\n  assertFunction(fn, context);\n  return (controller: WritableStreamDefaultController) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertUnderlyingSinkWriteCallback<W>(\n  fn: UnderlyingSinkWriteCallback<W>,\n  original: UnderlyingSink<W>,\n  context: string\n): (chunk: W, controller: WritableStreamDefaultController) => Promise<void> {\n  assertFunction(fn, context);\n  return (chunk: W, controller: WritableStreamDefaultController) => promiseCall(fn, original, [chunk, controller]);\n}\n","import { IsWritableStream, WritableStream } from '../writable-stream';\n\nexport function assertWritableStream(x: unknown, context: string): asserts x is WritableStream {\n  if (!IsWritableStream(x)) {\n    throw new TypeError(`${context} is not a WritableStream.`);\n  }\n}\n","/**\n * A signal object that allows you to communicate with a request and abort it if required\n * via its associated `AbortController` object.\n *\n * @remarks\n *   This interface is compatible with the `AbortSignal` interface defined in TypeScript's DOM types.\n *   It is redefined here, so it can be polyfilled without a DOM, for example with\n *   {@link https://www.npmjs.com/package/abortcontroller-polyfill | abortcontroller-polyfill} in a Node environment.\n *\n * @public\n */\nexport interface AbortSignal {\n  /**\n   * Whether the request is aborted.\n   */\n  readonly aborted: boolean;\n\n  /**\n   * Add an event listener to be triggered when this signal becomes aborted.\n   */\n  addEventListener(type: 'abort', listener: () => void): void;\n\n  /**\n   * Remove an event listener that was previously added with {@link AbortSignal.addEventListener}.\n   */\n  removeEventListener(type: 'abort', listener: () => void): void;\n}\n\nexport function isAbortSignal(value: unknown): value is AbortSignal {\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n  try {\n    return typeof (value as AbortSignal).aborted === 'boolean';\n  } catch {\n    // AbortSignal.prototype.aborted throws if its brand check fails\n    return false;\n  }\n}\n\n/**\n * A controller object that allows you to abort an `AbortSignal` when desired.\n *\n * @remarks\n *   This interface is compatible with the `AbortController` interface defined in TypeScript's DOM types.\n *   It is redefined here, so it can be polyfilled without a DOM, for example with\n *   {@link https://www.npmjs.com/package/abortcontroller-polyfill | abortcontroller-polyfill} in a Node environment.\n *\n * @internal\n */\nexport interface AbortController {\n  readonly signal: AbortSignal;\n\n  abort(): void;\n}\n\ninterface AbortControllerConstructor {\n  new(): AbortController;\n}\n\nconst supportsAbortController = typeof (AbortController as any) === 'function';\n\n/**\n * Construct a new AbortController, if supported by the platform.\n *\n * @internal\n */\nexport function createAbortController(): AbortController | undefined {\n  if (supportsAbortController) {\n    return new (AbortController as AbortControllerConstructor)();\n  }\n  return undefined;\n}\n","import assert from '../stub/assert';\nimport {\n  newPromise,\n  promiseRejectedWith,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  uponPromise\n} from './helpers/webidl';\nimport {\n  DequeueValue,\n  EnqueueValueWithSize,\n  PeekQueueValue,\n  QueuePair,\n  ResetQueue\n} from './abstract-ops/queue-with-sizes';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { SimpleQueue } from './simple-queue';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { AbortSteps, ErrorSteps } from './abstract-ops/internal-methods';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport {\n  UnderlyingSink,\n  UnderlyingSinkAbortCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  ValidatedUnderlyingSink\n} from './writable-stream/underlying-sink';\nimport { assertObject, assertRequiredArgument } from './validators/basic';\nimport { convertUnderlyingSink } from './validators/underlying-sink';\nimport { assertWritableStream } from './validators/writable-stream';\nimport { AbortController, AbortSignal, createAbortController } from './abort-signal';\n\ntype WritableStreamState = 'writable' | 'closed' | 'erroring' | 'errored';\n\ninterface WriteOrCloseRequest {\n  _resolve: (value?: undefined) => void;\n  _reject: (reason: any) => void;\n}\n\ntype WriteRequest = WriteOrCloseRequest;\ntype CloseRequest = WriteOrCloseRequest;\n\ninterface PendingAbortRequest {\n  _promise: Promise<undefined>;\n  _resolve: (value?: undefined) => void;\n  _reject: (reason: any) => void;\n  _reason: any;\n  _wasAlreadyErroring: boolean;\n}\n\n/**\n * A writable stream represents a destination for data, into which you can write.\n *\n * @public\n */\nclass WritableStream<W = any> {\n  /** @internal */\n  _state!: WritableStreamState;\n  /** @internal */\n  _storedError: any;\n  /** @internal */\n  _writer: WritableStreamDefaultWriter<W> | undefined;\n  /** @internal */\n  _writableStreamController!: WritableStreamDefaultController<W>;\n  /** @internal */\n  _writeRequests!: SimpleQueue<WriteRequest>;\n  /** @internal */\n  _inFlightWriteRequest: WriteRequest | undefined;\n  /** @internal */\n  _closeRequest: CloseRequest | undefined;\n  /** @internal */\n  _inFlightCloseRequest: CloseRequest | undefined;\n  /** @internal */\n  _pendingAbortRequest: PendingAbortRequest | undefined;\n  /** @internal */\n  _backpressure!: boolean;\n\n  constructor(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>);\n  constructor(rawUnderlyingSink: UnderlyingSink<W> | null | undefined = {},\n              rawStrategy: QueuingStrategy<W> | null | undefined = {}) {\n    if (rawUnderlyingSink === undefined) {\n      rawUnderlyingSink = null;\n    } else {\n      assertObject(rawUnderlyingSink, 'First parameter');\n    }\n\n    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n    const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n\n    InitializeWritableStream(this);\n\n    const type = underlyingSink.type;\n    if (type !== undefined) {\n      throw new RangeError('Invalid type is specified');\n    }\n\n    const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n    const highWaterMark = ExtractHighWaterMark(strategy, 1);\n\n    SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n  }\n\n  /**\n   * Returns whether or not the writable stream is locked to a writer.\n   */\n  get locked(): boolean {\n    if (!IsWritableStream(this)) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsWritableStreamLocked(this);\n  }\n\n  /**\n   * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n   * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n   * mechanism of the underlying sink.\n   *\n   * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n   * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n   * the stream) if the stream is currently locked.\n   */\n  abort(reason: any = undefined): Promise<void> {\n    if (!IsWritableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('abort'));\n    }\n\n    if (IsWritableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n    }\n\n    return WritableStreamAbort(this, reason);\n  }\n\n  /**\n   * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n   * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n   *\n   * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n   * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n   * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n   */\n  close() {\n    if (!IsWritableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('close'));\n    }\n\n    if (IsWritableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(this)) {\n      return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n    }\n\n    return WritableStreamClose(this);\n  }\n\n  /**\n   * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n   * is locked, no other writer can be acquired until this one is released.\n   *\n   * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n   * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n   * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n   */\n  getWriter(): WritableStreamDefaultWriter<W> {\n    if (!IsWritableStream(this)) {\n      throw streamBrandCheckException('getWriter');\n    }\n\n    return AcquireWritableStreamDefaultWriter(this);\n  }\n}\n\nObject.defineProperties(WritableStream.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  getWriter: { enumerable: true },\n  locked: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStream.prototype, Symbol.toStringTag, {\n    value: 'WritableStream',\n    configurable: true\n  });\n}\n\nexport {\n  AcquireWritableStreamDefaultWriter,\n  CreateWritableStream,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamDefaultControllerErrorIfNeeded,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite,\n  WritableStreamCloseQueuedOrInFlight,\n  UnderlyingSink,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkAbortCallback\n};\n\n// Abstract operations for the WritableStream.\n\nfunction AcquireWritableStreamDefaultWriter<W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W> {\n  return new WritableStreamDefaultWriter(stream);\n}\n\n// Throws if and only if startAlgorithm throws.\nfunction CreateWritableStream<W>(startAlgorithm: () => void | PromiseLike<void>,\n                                 writeAlgorithm: (chunk: W) => Promise<void>,\n                                 closeAlgorithm: () => Promise<void>,\n                                 abortAlgorithm: (reason: any) => Promise<void>,\n                                 highWaterMark = 1,\n                                 sizeAlgorithm: QueuingStrategySizeCallback<W> = () => 1) {\n  assert(IsNonNegativeNumber(highWaterMark));\n\n  const stream: WritableStream<W> = Object.create(WritableStream.prototype);\n  InitializeWritableStream(stream);\n\n  const controller: WritableStreamDefaultController<W> = Object.create(WritableStreamDefaultController.prototype);\n\n  SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm,\n                                       abortAlgorithm, highWaterMark, sizeAlgorithm);\n  return stream;\n}\n\nfunction InitializeWritableStream<W>(stream: WritableStream<W>) {\n  stream._state = 'writable';\n\n  // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n  // 'erroring' or 'errored'. May be set to an undefined value.\n  stream._storedError = undefined;\n\n  stream._writer = undefined;\n\n  // Initialize to undefined first because the constructor of the controller checks this\n  // variable to validate the caller.\n  stream._writableStreamController = undefined!;\n\n  // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n  // producer without waiting for the queued writes to finish.\n  stream._writeRequests = new SimpleQueue();\n\n  // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n  // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n  stream._inFlightWriteRequest = undefined;\n\n  // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n  // has been detached.\n  stream._closeRequest = undefined;\n\n  // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n  // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n  stream._inFlightCloseRequest = undefined;\n\n  // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n  stream._pendingAbortRequest = undefined;\n\n  // The backpressure signal set by the controller.\n  stream._backpressure = false;\n}\n\nfunction IsWritableStream(x: unknown): x is WritableStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n    return false;\n  }\n\n  return x instanceof WritableStream;\n}\n\nfunction IsWritableStreamLocked(stream: WritableStream): boolean {\n  assert(IsWritableStream(stream));\n\n  if (stream._writer === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamAbort(stream: WritableStream, reason: any): Promise<undefined> {\n  if (stream._state === 'closed' || stream._state === 'errored') {\n    return promiseResolvedWith(undefined);\n  }\n  stream._writableStreamController._abortReason = reason;\n  stream._writableStreamController._abortController?.abort();\n\n  // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n  // but it doesn't know that signaling abort runs author code that might have changed the state.\n  // Widen the type again by casting to WritableStreamState.\n  const state = stream._state as WritableStreamState;\n\n  if (state === 'closed' || state === 'errored') {\n    return promiseResolvedWith(undefined);\n  }\n  if (stream._pendingAbortRequest !== undefined) {\n    return stream._pendingAbortRequest._promise;\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  let wasAlreadyErroring = false;\n  if (state === 'erroring') {\n    wasAlreadyErroring = true;\n    // reason will not be used, so don't keep a reference to it.\n    reason = undefined;\n  }\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    stream._pendingAbortRequest = {\n      _promise: undefined!,\n      _resolve: resolve,\n      _reject: reject,\n      _reason: reason,\n      _wasAlreadyErroring: wasAlreadyErroring\n    };\n  });\n  stream._pendingAbortRequest!._promise = promise;\n\n  if (!wasAlreadyErroring) {\n    WritableStreamStartErroring(stream, reason);\n  }\n\n  return promise;\n}\n\nfunction WritableStreamClose(stream: WritableStream<any>): Promise<undefined> {\n  const state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n    return promiseRejectedWith(new TypeError(\n      `The stream (in ${state} state) is not in the writable state and cannot be closed`));\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n  assert(!WritableStreamCloseQueuedOrInFlight(stream));\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    const closeRequest: CloseRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._closeRequest = closeRequest;\n  });\n\n  const writer = stream._writer;\n  if (writer !== undefined && stream._backpressure && state === 'writable') {\n    defaultWriterReadyPromiseResolve(writer);\n  }\n\n  WritableStreamDefaultControllerClose(stream._writableStreamController);\n\n  return promise;\n}\n\n// WritableStream API exposed for controllers.\n\nfunction WritableStreamAddWriteRequest(stream: WritableStream): Promise<undefined> {\n  assert(IsWritableStreamLocked(stream));\n  assert(stream._state === 'writable');\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    const writeRequest: WriteRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._writeRequests.push(writeRequest);\n  });\n\n  return promise;\n}\n\nfunction WritableStreamDealWithRejection(stream: WritableStream, error: any) {\n  const state = stream._state;\n\n  if (state === 'writable') {\n    WritableStreamStartErroring(stream, error);\n    return;\n  }\n\n  assert(state === 'erroring');\n  WritableStreamFinishErroring(stream);\n}\n\nfunction WritableStreamStartErroring(stream: WritableStream, reason: any) {\n  assert(stream._storedError === undefined);\n  assert(stream._state === 'writable');\n\n  const controller = stream._writableStreamController;\n  assert(controller !== undefined);\n\n  stream._state = 'erroring';\n  stream._storedError = reason;\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n  }\n\n  if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n    WritableStreamFinishErroring(stream);\n  }\n}\n\nfunction WritableStreamFinishErroring(stream: WritableStream) {\n  assert(stream._state === 'erroring');\n  assert(!WritableStreamHasOperationMarkedInFlight(stream));\n  stream._state = 'errored';\n  stream._writableStreamController[ErrorSteps]();\n\n  const storedError = stream._storedError;\n  stream._writeRequests.forEach(writeRequest => {\n    writeRequest._reject(storedError);\n  });\n  stream._writeRequests = new SimpleQueue();\n\n  if (stream._pendingAbortRequest === undefined) {\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const abortRequest = stream._pendingAbortRequest;\n  stream._pendingAbortRequest = undefined;\n\n  if (abortRequest._wasAlreadyErroring) {\n    abortRequest._reject(storedError);\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n  uponPromise(\n    promise,\n    () => {\n      abortRequest._resolve();\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    },\n    (reason: any) => {\n      abortRequest._reject(reason);\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    });\n}\n\nfunction WritableStreamFinishInFlightWrite(stream: WritableStream) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest!._resolve(undefined);\n  stream._inFlightWriteRequest = undefined;\n}\n\nfunction WritableStreamFinishInFlightWriteWithError(stream: WritableStream, error: any) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest!._reject(error);\n  stream._inFlightWriteRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  WritableStreamDealWithRejection(stream, error);\n}\n\nfunction WritableStreamFinishInFlightClose(stream: WritableStream) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest!._resolve(undefined);\n  stream._inFlightCloseRequest = undefined;\n\n  const state = stream._state;\n\n  assert(state === 'writable' || state === 'erroring');\n\n  if (state === 'erroring') {\n    // The error was too late to do anything, so it is ignored.\n    stream._storedError = undefined;\n    if (stream._pendingAbortRequest !== undefined) {\n      stream._pendingAbortRequest._resolve();\n      stream._pendingAbortRequest = undefined;\n    }\n  }\n\n  stream._state = 'closed';\n\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseResolve(writer);\n  }\n\n  assert(stream._pendingAbortRequest === undefined);\n  assert(stream._storedError === undefined);\n}\n\nfunction WritableStreamFinishInFlightCloseWithError(stream: WritableStream, error: any) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest!._reject(error);\n  stream._inFlightCloseRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  // Never execute sink abort() after sink close().\n  if (stream._pendingAbortRequest !== undefined) {\n    stream._pendingAbortRequest._reject(error);\n    stream._pendingAbortRequest = undefined;\n  }\n  WritableStreamDealWithRejection(stream, error);\n}\n\n// TODO(ricea): Fix alphabetical order.\nfunction WritableStreamCloseQueuedOrInFlight(stream: WritableStream): boolean {\n  if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamHasOperationMarkedInFlight(stream: WritableStream): boolean {\n  if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamMarkCloseRequestInFlight(stream: WritableStream) {\n  assert(stream._inFlightCloseRequest === undefined);\n  assert(stream._closeRequest !== undefined);\n  stream._inFlightCloseRequest = stream._closeRequest;\n  stream._closeRequest = undefined;\n}\n\nfunction WritableStreamMarkFirstWriteRequestInFlight(stream: WritableStream) {\n  assert(stream._inFlightWriteRequest === undefined);\n  assert(stream._writeRequests.length !== 0);\n  stream._inFlightWriteRequest = stream._writeRequests.shift();\n}\n\nfunction WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream: WritableStream) {\n  assert(stream._state === 'errored');\n  if (stream._closeRequest !== undefined) {\n    assert(stream._inFlightCloseRequest === undefined);\n\n    stream._closeRequest._reject(stream._storedError);\n    stream._closeRequest = undefined;\n  }\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseReject(writer, stream._storedError);\n  }\n}\n\nfunction WritableStreamUpdateBackpressure(stream: WritableStream, backpressure: boolean) {\n  assert(stream._state === 'writable');\n  assert(!WritableStreamCloseQueuedOrInFlight(stream));\n\n  const writer = stream._writer;\n  if (writer !== undefined && backpressure !== stream._backpressure) {\n    if (backpressure) {\n      defaultWriterReadyPromiseReset(writer);\n    } else {\n      assert(!backpressure);\n\n      defaultWriterReadyPromiseResolve(writer);\n    }\n  }\n\n  stream._backpressure = backpressure;\n}\n\n/**\n * A default writer vended by a {@link WritableStream}.\n *\n * @public\n */\nexport class WritableStreamDefaultWriter<W = any> {\n  /** @internal */\n  _ownerWritableStream: WritableStream<W>;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _closedPromiseState!: 'pending' | 'resolved' | 'rejected';\n  /** @internal */\n  _readyPromise!: Promise<undefined>;\n  /** @internal */\n  _readyPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _readyPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readyPromiseState!: 'pending' | 'fulfilled' | 'rejected';\n\n  constructor(stream: WritableStream<W>) {\n    assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n    assertWritableStream(stream, 'First parameter');\n\n    if (IsWritableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n    }\n\n    this._ownerWritableStream = stream;\n    stream._writer = this;\n\n    const state = stream._state;\n\n    if (state === 'writable') {\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n        defaultWriterReadyPromiseInitialize(this);\n      } else {\n        defaultWriterReadyPromiseInitializeAsResolved(this);\n      }\n\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'erroring') {\n      defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'closed') {\n      defaultWriterReadyPromiseInitializeAsResolved(this);\n      defaultWriterClosedPromiseInitializeAsResolved(this);\n    } else {\n      assert(state === 'errored');\n\n      const storedError = stream._storedError;\n      defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n      defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n    }\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n   * the writer’s lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n   * A producer can use this information to determine the right amount of data to write.\n   *\n   * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n   * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n   * the writer’s lock is released.\n   */\n  get desiredSize(): number | null {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      throw defaultWriterBrandCheckException('desiredSize');\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      throw defaultWriterLockException('desiredSize');\n    }\n\n    return WritableStreamDefaultWriterGetDesiredSize(this);\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n   * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n   * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n   *\n   * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n   * rejected.\n   */\n  get ready(): Promise<undefined> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n    }\n\n    return this._readyPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n   */\n  abort(reason: any = undefined): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('abort'));\n    }\n\n    return WritableStreamDefaultWriterAbort(this, reason);\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n   */\n  close(): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('close'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(stream)) {\n      return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n    }\n\n    return WritableStreamDefaultWriterClose(this);\n  }\n\n  /**\n   * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n   * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n   * now on; otherwise, the writer will appear closed.\n   *\n   * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n   * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n   * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n   * other producers from writing in an interleaved manner.\n   */\n  releaseLock(): void {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      throw defaultWriterBrandCheckException('releaseLock');\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return;\n    }\n\n    assert(stream._writer !== undefined);\n\n    WritableStreamDefaultWriterRelease(this);\n  }\n\n  /**\n   * Writes the given chunk to the writable stream, by waiting until any previous writes have finished successfully,\n   * and then sending the chunk to the underlying sink's {@link UnderlyingSink.write | write()} method. It will return\n   * a promise that fulfills with undefined upon a successful write, or rejects if the write fails or stream becomes\n   * errored before the writing process is initiated.\n   *\n   * Note that what \"success\" means is up to the underlying sink; it might indicate simply that the chunk has been\n   * accepted, and not necessarily that it is safely saved to its ultimate destination.\n   */\n  write(chunk: W): Promise<void>;\n  write(chunk: W = undefined!): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('write to'));\n    }\n\n    return WritableStreamDefaultWriterWrite(this, chunk);\n  }\n}\n\nObject.defineProperties(WritableStreamDefaultWriter.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  releaseLock: { enumerable: true },\n  write: { enumerable: true },\n  closed: { enumerable: true },\n  desiredSize: { enumerable: true },\n  ready: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultWriter.prototype, Symbol.toStringTag, {\n    value: 'WritableStreamDefaultWriter',\n    configurable: true\n  });\n}\n\n// Abstract operations for the WritableStreamDefaultWriter.\n\nfunction IsWritableStreamDefaultWriter<W = any>(x: any): x is WritableStreamDefaultWriter<W> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n    return false;\n  }\n\n  return x instanceof WritableStreamDefaultWriter;\n}\n\n// A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultWriterAbort(writer: WritableStreamDefaultWriter, reason: any) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamAbort(stream, reason);\n}\n\nfunction WritableStreamDefaultWriterClose(writer: WritableStreamDefaultWriter): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamClose(stream);\n}\n\nfunction WritableStreamDefaultWriterCloseWithErrorPropagation(writer: WritableStreamDefaultWriter): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const state = stream._state;\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n    return promiseResolvedWith(undefined);\n  }\n\n  if (state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  return WritableStreamDefaultWriterClose(writer);\n}\n\nfunction WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer: WritableStreamDefaultWriter, error: any) {\n  if (writer._closedPromiseState === 'pending') {\n    defaultWriterClosedPromiseReject(writer, error);\n  } else {\n    defaultWriterClosedPromiseResetToRejected(writer, error);\n  }\n}\n\nfunction WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer: WritableStreamDefaultWriter, error: any) {\n  if (writer._readyPromiseState === 'pending') {\n    defaultWriterReadyPromiseReject(writer, error);\n  } else {\n    defaultWriterReadyPromiseResetToRejected(writer, error);\n  }\n}\n\nfunction WritableStreamDefaultWriterGetDesiredSize(writer: WritableStreamDefaultWriter): number | null {\n  const stream = writer._ownerWritableStream;\n  const state = stream._state;\n\n  if (state === 'errored' || state === 'erroring') {\n    return null;\n  }\n\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n}\n\nfunction WritableStreamDefaultWriterRelease(writer: WritableStreamDefaultWriter) {\n  const stream = writer._ownerWritableStream;\n  assert(stream !== undefined);\n  assert(stream._writer === writer);\n\n  const releasedError = new TypeError(\n    `Writer was released and can no longer be used to monitor the stream's closedness`);\n\n  WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n\n  // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n  // rejected until afterwards. This means that simply testing state will not work.\n  WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n\n  stream._writer = undefined;\n  writer._ownerWritableStream = undefined!;\n}\n\nfunction WritableStreamDefaultWriterWrite<W>(writer: WritableStreamDefaultWriter<W>, chunk: W): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const controller = stream._writableStreamController;\n\n  const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n\n  if (stream !== writer._ownerWritableStream) {\n    return promiseRejectedWith(defaultWriterLockException('write to'));\n  }\n\n  const state = stream._state;\n  if (state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n    return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n  }\n  if (state === 'erroring') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  assert(state === 'writable');\n\n  const promise = WritableStreamAddWriteRequest(stream);\n\n  WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n\n  return promise;\n}\n\nconst closeSentinel: unique symbol = {} as any;\n\ntype QueueRecord<W> = W | typeof closeSentinel;\n\n/**\n * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n *\n * @public\n */\nexport class WritableStreamDefaultController<W = any> {\n  /** @internal */\n  _controlledWritableStream!: WritableStream<W>;\n  /** @internal */\n  _queue!: SimpleQueue<QueuePair<QueueRecord<W>>>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _abortReason: any;\n  /** @internal */\n  _abortController: AbortController | undefined;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _strategySizeAlgorithm!: QueuingStrategySizeCallback<W>;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _writeAlgorithm!: (chunk: W) => Promise<void>;\n  /** @internal */\n  _closeAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _abortAlgorithm!: (reason: any) => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n   *\n   * @deprecated\n   *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n   *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n   */\n  get abortReason(): any {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('abortReason');\n    }\n    return this._abortReason;\n  }\n\n  /**\n   * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n   */\n  get signal(): AbortSignal {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('signal');\n    }\n    if (this._abortController === undefined) {\n      // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n      // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n      // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n      throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');\n    }\n    return this._abortController.signal;\n  }\n\n  /**\n   * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n   *\n   * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n   * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n   * normal lifecycle of interactions with the underlying sink.\n   */\n  error(e: any = undefined): void {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n    const state = this._controlledWritableStream._state;\n    if (state !== 'writable') {\n      // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n      // just treat it as a no-op.\n      return;\n    }\n\n    WritableStreamDefaultControllerError(this, e);\n  }\n\n  /** @internal */\n  [AbortSteps](reason: any): Promise<void> {\n    const result = this._abortAlgorithm(reason);\n    WritableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [ErrorSteps]() {\n    ResetQueue(this);\n  }\n}\n\nObject.defineProperties(WritableStreamDefaultController.prototype, {\n  abortReason: { enumerable: true },\n  signal: { enumerable: true },\n  error: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'WritableStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Abstract operations implementing interface required by the WritableStream.\n\nfunction IsWritableStreamDefaultController(x: any): x is WritableStreamDefaultController<any> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n    return false;\n  }\n\n  return x instanceof WritableStreamDefaultController;\n}\n\nfunction SetUpWritableStreamDefaultController<W>(stream: WritableStream<W>,\n                                                 controller: WritableStreamDefaultController<W>,\n                                                 startAlgorithm: () => void | PromiseLike<void>,\n                                                 writeAlgorithm: (chunk: W) => Promise<void>,\n                                                 closeAlgorithm: () => Promise<void>,\n                                                 abortAlgorithm: (reason: any) => Promise<void>,\n                                                 highWaterMark: number,\n                                                 sizeAlgorithm: QueuingStrategySizeCallback<W>) {\n  assert(IsWritableStream(stream));\n  assert(stream._writableStreamController === undefined);\n\n  controller._controlledWritableStream = stream;\n  stream._writableStreamController = controller;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = undefined!;\n  controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._abortReason = undefined;\n  controller._abortController = createAbortController();\n  controller._started = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._writeAlgorithm = writeAlgorithm;\n  controller._closeAlgorithm = closeAlgorithm;\n  controller._abortAlgorithm = abortAlgorithm;\n\n  const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n  WritableStreamUpdateBackpressure(stream, backpressure);\n\n  const startResult = startAlgorithm();\n  const startPromise = promiseResolvedWith(startResult);\n  uponPromise(\n    startPromise,\n    () => {\n      assert(stream._state === 'writable' || stream._state === 'erroring');\n      controller._started = true;\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    },\n    r => {\n      assert(stream._state === 'writable' || stream._state === 'erroring');\n      controller._started = true;\n      WritableStreamDealWithRejection(stream, r);\n    }\n  );\n}\n\nfunction SetUpWritableStreamDefaultControllerFromUnderlyingSink<W>(stream: WritableStream<W>,\n                                                                   underlyingSink: ValidatedUnderlyingSink<W>,\n                                                                   highWaterMark: number,\n                                                                   sizeAlgorithm: QueuingStrategySizeCallback<W>) {\n  const controller = Object.create(WritableStreamDefaultController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let writeAlgorithm: (chunk: W) => Promise<void> = () => promiseResolvedWith(undefined);\n  let closeAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let abortAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingSink.start !== undefined) {\n    startAlgorithm = () => underlyingSink.start!(controller);\n  }\n  if (underlyingSink.write !== undefined) {\n    writeAlgorithm = chunk => underlyingSink.write!(chunk, controller);\n  }\n  if (underlyingSink.close !== undefined) {\n    closeAlgorithm = () => underlyingSink.close!();\n  }\n  if (underlyingSink.abort !== undefined) {\n    abortAlgorithm = reason => underlyingSink.abort!(reason);\n  }\n\n  SetUpWritableStreamDefaultController(\n    stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm\n  );\n}\n\n// ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\nfunction WritableStreamDefaultControllerClearAlgorithms(controller: WritableStreamDefaultController<any>) {\n  controller._writeAlgorithm = undefined!;\n  controller._closeAlgorithm = undefined!;\n  controller._abortAlgorithm = undefined!;\n  controller._strategySizeAlgorithm = undefined!;\n}\n\nfunction WritableStreamDefaultControllerClose<W>(controller: WritableStreamDefaultController<W>) {\n  EnqueueValueWithSize(controller, closeSentinel, 0);\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\nfunction WritableStreamDefaultControllerGetChunkSize<W>(controller: WritableStreamDefaultController<W>,\n                                                        chunk: W): number {\n  try {\n    return controller._strategySizeAlgorithm(chunk);\n  } catch (chunkSizeE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n    return 1;\n  }\n}\n\nfunction WritableStreamDefaultControllerGetDesiredSize(controller: WritableStreamDefaultController<any>): number {\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nfunction WritableStreamDefaultControllerWrite<W>(controller: WritableStreamDefaultController<W>,\n                                                 chunk: W,\n                                                 chunkSize: number) {\n  try {\n    EnqueueValueWithSize(controller, chunk, chunkSize);\n  } catch (enqueueE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n    return;\n  }\n\n  const stream = controller._controlledWritableStream;\n  if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n    const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n    WritableStreamUpdateBackpressure(stream, backpressure);\n  }\n\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\n// Abstract operations for the WritableStreamDefaultController.\n\nfunction WritableStreamDefaultControllerAdvanceQueueIfNeeded<W>(controller: WritableStreamDefaultController<W>) {\n  const stream = controller._controlledWritableStream;\n\n  if (!controller._started) {\n    return;\n  }\n\n  if (stream._inFlightWriteRequest !== undefined) {\n    return;\n  }\n\n  const state = stream._state;\n  assert(state !== 'closed' && state !== 'errored');\n  if (state === 'erroring') {\n    WritableStreamFinishErroring(stream);\n    return;\n  }\n\n  if (controller._queue.length === 0) {\n    return;\n  }\n\n  const value = PeekQueueValue(controller);\n  if (value === closeSentinel) {\n    WritableStreamDefaultControllerProcessClose(controller);\n  } else {\n    WritableStreamDefaultControllerProcessWrite(controller, value);\n  }\n}\n\nfunction WritableStreamDefaultControllerErrorIfNeeded(controller: WritableStreamDefaultController<any>, error: any) {\n  if (controller._controlledWritableStream._state === 'writable') {\n    WritableStreamDefaultControllerError(controller, error);\n  }\n}\n\nfunction WritableStreamDefaultControllerProcessClose(controller: WritableStreamDefaultController<any>) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkCloseRequestInFlight(stream);\n\n  DequeueValue(controller);\n  assert(controller._queue.length === 0);\n\n  const sinkClosePromise = controller._closeAlgorithm();\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  uponPromise(\n    sinkClosePromise,\n    () => {\n      WritableStreamFinishInFlightClose(stream);\n    },\n    reason => {\n      WritableStreamFinishInFlightCloseWithError(stream, reason);\n    }\n  );\n}\n\nfunction WritableStreamDefaultControllerProcessWrite<W>(controller: WritableStreamDefaultController<W>, chunk: W) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkFirstWriteRequestInFlight(stream);\n\n  const sinkWritePromise = controller._writeAlgorithm(chunk);\n  uponPromise(\n    sinkWritePromise,\n    () => {\n      WritableStreamFinishInFlightWrite(stream);\n\n      const state = stream._state;\n      assert(state === 'writable' || state === 'erroring');\n\n      DequeueValue(controller);\n\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n      }\n\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    },\n    reason => {\n      if (stream._state === 'writable') {\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n      }\n      WritableStreamFinishInFlightWriteWithError(stream, reason);\n    }\n  );\n}\n\nfunction WritableStreamDefaultControllerGetBackpressure(controller: WritableStreamDefaultController<any>): boolean {\n  const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n  return desiredSize <= 0;\n}\n\n// A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultControllerError(controller: WritableStreamDefaultController<any>, error: any) {\n  const stream = controller._controlledWritableStream;\n\n  assert(stream._state === 'writable');\n\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  WritableStreamStartErroring(stream, error);\n}\n\n// Helper functions for the WritableStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n}\n\n// Helper functions for the WritableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);\n}\n\n\n// Helper functions for the WritableStreamDefaultWriter.\n\nfunction defaultWriterBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n}\n\nfunction defaultWriterLockException(name: string): TypeError {\n  return new TypeError('Cannot ' + name + ' a stream using a released writer');\n}\n\nfunction defaultWriterClosedPromiseInitialize(writer: WritableStreamDefaultWriter) {\n  writer._closedPromise = newPromise((resolve, reject) => {\n    writer._closedPromise_resolve = resolve;\n    writer._closedPromise_reject = reject;\n    writer._closedPromiseState = 'pending';\n  });\n}\n\nfunction defaultWriterClosedPromiseInitializeAsRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseReject(writer, reason);\n}\n\nfunction defaultWriterClosedPromiseInitializeAsResolved(writer: WritableStreamDefaultWriter) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseResolve(writer);\n}\n\nfunction defaultWriterClosedPromiseReject(writer: WritableStreamDefaultWriter, reason: any) {\n  if (writer._closedPromise_reject === undefined) {\n    return;\n  }\n  assert(writer._closedPromiseState === 'pending');\n\n  setPromiseIsHandledToTrue(writer._closedPromise);\n  writer._closedPromise_reject(reason);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'rejected';\n}\n\nfunction defaultWriterClosedPromiseResetToRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  assert(writer._closedPromise_resolve === undefined);\n  assert(writer._closedPromise_reject === undefined);\n  assert(writer._closedPromiseState !== 'pending');\n\n  defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n}\n\nfunction defaultWriterClosedPromiseResolve(writer: WritableStreamDefaultWriter) {\n  if (writer._closedPromise_resolve === undefined) {\n    return;\n  }\n  assert(writer._closedPromiseState === 'pending');\n\n  writer._closedPromise_resolve(undefined);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'resolved';\n}\n\nfunction defaultWriterReadyPromiseInitialize(writer: WritableStreamDefaultWriter) {\n  writer._readyPromise = newPromise((resolve, reject) => {\n    writer._readyPromise_resolve = resolve;\n    writer._readyPromise_reject = reject;\n  });\n  writer._readyPromiseState = 'pending';\n}\n\nfunction defaultWriterReadyPromiseInitializeAsRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseReject(writer, reason);\n}\n\nfunction defaultWriterReadyPromiseInitializeAsResolved(writer: WritableStreamDefaultWriter) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseResolve(writer);\n}\n\nfunction defaultWriterReadyPromiseReject(writer: WritableStreamDefaultWriter, reason: any) {\n  if (writer._readyPromise_reject === undefined) {\n    return;\n  }\n\n  setPromiseIsHandledToTrue(writer._readyPromise);\n  writer._readyPromise_reject(reason);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'rejected';\n}\n\nfunction defaultWriterReadyPromiseReset(writer: WritableStreamDefaultWriter) {\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  defaultWriterReadyPromiseInitialize(writer);\n}\n\nfunction defaultWriterReadyPromiseResetToRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n}\n\nfunction defaultWriterReadyPromiseResolve(writer: WritableStreamDefaultWriter) {\n  if (writer._readyPromise_resolve === undefined) {\n    return;\n  }\n\n  writer._readyPromise_resolve(undefined);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'fulfilled';\n}\n","/// <reference lib=\"dom\" />\nexport const NativeDOMException: typeof DOMException | undefined =\n  typeof DOMException !== 'undefined' ? DOMException : undefined;\n","/// <reference types=\"node\" />\nimport { NativeDOMException } from './native';\n\ndeclare class DOMExceptionClass extends Error {\n  constructor(message?: string, name?: string);\n\n  name: string;\n  message: string;\n}\n\ntype DOMException = DOMExceptionClass;\ntype DOMExceptionConstructor = typeof DOMExceptionClass;\n\nfunction isDOMExceptionConstructor(ctor: unknown): ctor is DOMExceptionConstructor {\n  if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\n    return false;\n  }\n  try {\n    new (ctor as DOMExceptionConstructor)();\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction createDOMExceptionPolyfill(): DOMExceptionConstructor {\n  // eslint-disable-next-line no-shadow\n  const ctor = function DOMException(this: DOMException, message?: string, name?: string) {\n    this.message = message || '';\n    this.name = name || 'Error';\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  } as any;\n  ctor.prototype = Object.create(Error.prototype);\n  Object.defineProperty(ctor.prototype, 'constructor', { value: ctor, writable: true, configurable: true });\n  return ctor;\n}\n\n// eslint-disable-next-line no-redeclare\nconst DOMException: DOMExceptionConstructor =\n  isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n\nexport { DOMException };\n","import { IsReadableStream, IsReadableStreamLocked, ReadableStream, ReadableStreamCancel } from '../readable-stream';\nimport { AcquireReadableStreamDefaultReader, ReadableStreamDefaultReaderRead } from './default-reader';\nimport { ReadableStreamReaderGenericRelease } from './generic-reader';\nimport {\n  AcquireWritableStreamDefaultWriter,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamCloseQueuedOrInFlight,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite\n} from '../writable-stream';\nimport assert from '../../stub/assert';\nimport {\n  newPromise,\n  PerformPromiseThen,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  uponFulfillment,\n  uponPromise,\n  uponRejection\n} from '../helpers/webidl';\nimport { noop } from '../../utils';\nimport { AbortSignal, isAbortSignal } from '../abort-signal';\nimport { DOMException } from '../../stub/dom-exception';\n\nexport function ReadableStreamPipeTo<T>(source: ReadableStream<T>,\n                                        dest: WritableStream<T>,\n                                        preventClose: boolean,\n                                        preventAbort: boolean,\n                                        preventCancel: boolean,\n                                        signal: AbortSignal | undefined): Promise<undefined> {\n  assert(IsReadableStream(source));\n  assert(IsWritableStream(dest));\n  assert(typeof preventClose === 'boolean');\n  assert(typeof preventAbort === 'boolean');\n  assert(typeof preventCancel === 'boolean');\n  assert(signal === undefined || isAbortSignal(signal));\n  assert(!IsReadableStreamLocked(source));\n  assert(!IsWritableStreamLocked(dest));\n\n  const reader = AcquireReadableStreamDefaultReader<T>(source);\n  const writer = AcquireWritableStreamDefaultWriter<T>(dest);\n\n  source._disturbed = true;\n\n  let shuttingDown = false;\n\n  // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n  let currentWrite = promiseResolvedWith<void>(undefined);\n\n  return newPromise((resolve, reject) => {\n    let abortAlgorithm: () => void;\n    if (signal !== undefined) {\n      abortAlgorithm = () => {\n        const error = new DOMException('Aborted', 'AbortError');\n        const actions: Array<() => Promise<void>> = [];\n        if (!preventAbort) {\n          actions.push(() => {\n            if (dest._state === 'writable') {\n              return WritableStreamAbort(dest, error);\n            }\n            return promiseResolvedWith(undefined);\n          });\n        }\n        if (!preventCancel) {\n          actions.push(() => {\n            if (source._state === 'readable') {\n              return ReadableStreamCancel(source, error);\n            }\n            return promiseResolvedWith(undefined);\n          });\n        }\n        shutdownWithAction(() => Promise.all(actions.map(action => action())), true, error);\n      };\n\n      if (signal.aborted) {\n        abortAlgorithm();\n        return;\n      }\n\n      signal.addEventListener('abort', abortAlgorithm);\n    }\n\n    // Using reader and writer, read all chunks from this and write them to dest\n    // - Backpressure must be enforced\n    // - Shutdown must stop all activity\n    function pipeLoop() {\n      return newPromise<void>((resolveLoop, rejectLoop) => {\n        function next(done: boolean) {\n          if (done) {\n            resolveLoop();\n          } else {\n            // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n            // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n            PerformPromiseThen(pipeStep(), next, rejectLoop);\n          }\n        }\n\n        next(false);\n      });\n    }\n\n    function pipeStep(): Promise<boolean> {\n      if (shuttingDown) {\n        return promiseResolvedWith(true);\n      }\n\n      return PerformPromiseThen(writer._readyPromise, () => {\n        return newPromise<boolean>((resolveRead, rejectRead) => {\n          ReadableStreamDefaultReaderRead(\n            reader,\n            {\n              _chunkSteps: chunk => {\n                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                resolveRead(false);\n              },\n              _closeSteps: () => resolveRead(true),\n              _errorSteps: rejectRead\n            }\n          );\n        });\n      });\n    }\n\n    // Errors must be propagated forward\n    isOrBecomesErrored(source, reader._closedPromise, storedError => {\n      if (!preventAbort) {\n        shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n    });\n\n    // Errors must be propagated backward\n    isOrBecomesErrored(dest, writer._closedPromise, storedError => {\n      if (!preventCancel) {\n        shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n    });\n\n    // Closing must be propagated forward\n    isOrBecomesClosed(source, reader._closedPromise, () => {\n      if (!preventClose) {\n        shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n      } else {\n        shutdown();\n      }\n    });\n\n    // Closing must be propagated backward\n    if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n      const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\n\n      if (!preventCancel) {\n        shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);\n      } else {\n        shutdown(true, destClosed);\n      }\n    }\n\n    setPromiseIsHandledToTrue(pipeLoop());\n\n    function waitForWritesToFinish(): Promise<void> {\n      // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n      // for that too.\n      const oldCurrentWrite = currentWrite;\n      return PerformPromiseThen(\n        currentWrite,\n        () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined\n      );\n    }\n\n    function isOrBecomesErrored(stream: ReadableStream | WritableStream,\n                                promise: Promise<void>,\n                                action: (reason: any) => void) {\n      if (stream._state === 'errored') {\n        action(stream._storedError);\n      } else {\n        uponRejection(promise, action);\n      }\n    }\n\n    function isOrBecomesClosed(stream: ReadableStream | WritableStream, promise: Promise<void>, action: () => void) {\n      if (stream._state === 'closed') {\n        action();\n      } else {\n        uponFulfillment(promise, action);\n      }\n    }\n\n    function shutdownWithAction(action: () => Promise<unknown>, originalIsError?: boolean, originalError?: any) {\n      if (shuttingDown) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n        uponFulfillment(waitForWritesToFinish(), doTheRest);\n      } else {\n        doTheRest();\n      }\n\n      function doTheRest() {\n        uponPromise(\n          action(),\n          () => finalize(originalIsError, originalError),\n          newError => finalize(true, newError)\n        );\n      }\n    }\n\n    function shutdown(isError?: boolean, error?: any) {\n      if (shuttingDown) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n        uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));\n      } else {\n        finalize(isError, error);\n      }\n    }\n\n    function finalize(isError?: boolean, error?: any) {\n      WritableStreamDefaultWriterRelease(writer);\n      ReadableStreamReaderGenericRelease(reader);\n\n      if (signal !== undefined) {\n        signal.removeEventListener('abort', abortAlgorithm);\n      }\n      if (isError) {\n        reject(error);\n      } else {\n        resolve(undefined);\n      }\n    }\n  });\n}\n","import { QueuingStrategySizeCallback } from '../queuing-strategy';\nimport assert from '../../stub/assert';\nimport { DequeueValue, EnqueueValueWithSize, QueuePair, ResetQueue } from '../abstract-ops/queue-with-sizes';\nimport {\n  ReadableStreamAddReadRequest,\n  ReadableStreamFulfillReadRequest,\n  ReadableStreamGetNumReadRequests,\n  ReadRequest\n} from './default-reader';\nimport { SimpleQueue } from '../simple-queue';\nimport { IsReadableStreamLocked, ReadableStream, ReadableStreamClose, ReadableStreamError } from '../readable-stream';\nimport { ValidatedUnderlyingSource } from './underlying-source';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { CancelSteps, PullSteps } from '../abstract-ops/internal-methods';\nimport { promiseResolvedWith, uponPromise } from '../helpers/webidl';\n\n/**\n * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n *\n * @public\n */\nexport class ReadableStreamDefaultController<R> {\n  /** @internal */\n  _controlledReadableStream!: ReadableStream<R>;\n  /** @internal */\n  _queue!: SimpleQueue<QueuePair<R>>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _closeRequested!: boolean;\n  /** @internal */\n  _pullAgain!: boolean;\n  /** @internal */\n  _pulling !: boolean;\n  /** @internal */\n  _strategySizeAlgorithm!: QueuingStrategySizeCallback<R>;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _pullAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _cancelAlgorithm!: (reason: any) => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n   * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n   */\n  get desiredSize(): number | null {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableStreamDefaultControllerGetDesiredSize(this);\n  }\n\n  /**\n   * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n   * the stream, but once those are read, the stream will become closed.\n   */\n  close(): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('close');\n    }\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n      throw new TypeError('The stream is not in a state that permits close');\n    }\n\n    ReadableStreamDefaultControllerClose(this);\n  }\n\n  /**\n   * Enqueues the given chunk `chunk` in the controlled readable stream.\n   */\n  enqueue(chunk: R): void;\n  enqueue(chunk: R = undefined!): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n      throw new TypeError('The stream is not in a state that permits enqueue');\n    }\n\n    return ReadableStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n   */\n  error(e: any = undefined): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    ReadableStreamDefaultControllerError(this, e);\n  }\n\n  /** @internal */\n  [CancelSteps](reason: any): Promise<void> {\n    ResetQueue(this);\n    const result = this._cancelAlgorithm(reason);\n    ReadableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [PullSteps](readRequest: ReadRequest<R>): void {\n    const stream = this._controlledReadableStream;\n\n    if (this._queue.length > 0) {\n      const chunk = DequeueValue(this);\n\n      if (this._closeRequested && this._queue.length === 0) {\n        ReadableStreamDefaultControllerClearAlgorithms(this);\n        ReadableStreamClose(stream);\n      } else {\n        ReadableStreamDefaultControllerCallPullIfNeeded(this);\n      }\n\n      readRequest._chunkSteps(chunk);\n    } else {\n      ReadableStreamAddReadRequest(stream, readRequest);\n      ReadableStreamDefaultControllerCallPullIfNeeded(this);\n    }\n  }\n}\n\nObject.defineProperties(ReadableStreamDefaultController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Abstract operations for the ReadableStreamDefaultController.\n\nfunction IsReadableStreamDefaultController<R = any>(x: any): x is ReadableStreamDefaultController<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamDefaultController;\n}\n\nfunction ReadableStreamDefaultControllerCallPullIfNeeded(controller: ReadableStreamDefaultController<any>): void {\n  const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n  if (!shouldPull) {\n    return;\n  }\n\n  if (controller._pulling) {\n    controller._pullAgain = true;\n    return;\n  }\n\n  assert(!controller._pullAgain);\n\n  controller._pulling = true;\n\n  const pullPromise = controller._pullAlgorithm();\n  uponPromise(\n    pullPromise,\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n      }\n    },\n    e => {\n      ReadableStreamDefaultControllerError(controller, e);\n    }\n  );\n}\n\nfunction ReadableStreamDefaultControllerShouldCallPull(controller: ReadableStreamDefaultController<any>): boolean {\n  const stream = controller._controlledReadableStream;\n\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return false;\n  }\n\n  if (!controller._started) {\n    return false;\n  }\n\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize! > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableStreamDefaultControllerClearAlgorithms(controller: ReadableStreamDefaultController<any>) {\n  controller._pullAlgorithm = undefined!;\n  controller._cancelAlgorithm = undefined!;\n  controller._strategySizeAlgorithm = undefined!;\n}\n\n// A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n\nexport function ReadableStreamDefaultControllerClose(controller: ReadableStreamDefaultController<any>) {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return;\n  }\n\n  const stream = controller._controlledReadableStream;\n\n  controller._closeRequested = true;\n\n  if (controller._queue.length === 0) {\n    ReadableStreamDefaultControllerClearAlgorithms(controller);\n    ReadableStreamClose(stream);\n  }\n}\n\nexport function ReadableStreamDefaultControllerEnqueue<R>(\n  controller: ReadableStreamDefaultController<R>,\n  chunk: R\n): void {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return;\n  }\n\n  const stream = controller._controlledReadableStream;\n\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    ReadableStreamFulfillReadRequest(stream, chunk, false);\n  } else {\n    let chunkSize;\n    try {\n      chunkSize = controller._strategySizeAlgorithm(chunk);\n    } catch (chunkSizeE) {\n      ReadableStreamDefaultControllerError(controller, chunkSizeE);\n      throw chunkSizeE;\n    }\n\n    try {\n      EnqueueValueWithSize(controller, chunk, chunkSize);\n    } catch (enqueueE) {\n      ReadableStreamDefaultControllerError(controller, enqueueE);\n      throw enqueueE;\n    }\n  }\n\n  ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n}\n\nexport function ReadableStreamDefaultControllerError(controller: ReadableStreamDefaultController<any>, e: any) {\n  const stream = controller._controlledReadableStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ResetQueue(controller);\n\n  ReadableStreamDefaultControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nexport function ReadableStreamDefaultControllerGetDesiredSize(\n  controller: ReadableStreamDefaultController<any>\n): number | null {\n  const state = controller._controlledReadableStream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\n// This is used in the implementation of TransformStream.\nexport function ReadableStreamDefaultControllerHasBackpressure(\n  controller: ReadableStreamDefaultController<any>\n): boolean {\n  if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function ReadableStreamDefaultControllerCanCloseOrEnqueue(\n  controller: ReadableStreamDefaultController<any>\n): boolean {\n  const state = controller._controlledReadableStream._state;\n\n  if (!controller._closeRequested && state === 'readable') {\n    return true;\n  }\n\n  return false;\n}\n\nexport function SetUpReadableStreamDefaultController<R>(stream: ReadableStream<R>,\n                                                        controller: ReadableStreamDefaultController<R>,\n                                                        startAlgorithm: () => void | PromiseLike<void>,\n                                                        pullAlgorithm: () => Promise<void>,\n                                                        cancelAlgorithm: (reason: any) => Promise<void>,\n                                                        highWaterMark: number,\n                                                        sizeAlgorithm: QueuingStrategySizeCallback<R>) {\n  assert(stream._readableStreamController === undefined);\n\n  controller._controlledReadableStream = stream;\n\n  controller._queue = undefined!;\n  controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._started = false;\n  controller._closeRequested = false;\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  uponPromise(\n    promiseResolvedWith(startResult),\n    () => {\n      controller._started = true;\n\n      assert(!controller._pulling);\n      assert(!controller._pullAgain);\n\n      ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    },\n    r => {\n      ReadableStreamDefaultControllerError(controller, r);\n    }\n  );\n}\n\nexport function SetUpReadableStreamDefaultControllerFromUnderlyingSource<R>(\n  stream: ReadableStream<R>,\n  underlyingSource: ValidatedUnderlyingSource<R>,\n  highWaterMark: number,\n  sizeAlgorithm: QueuingStrategySizeCallback<R>\n) {\n  const controller: ReadableStreamDefaultController<R> = Object.create(ReadableStreamDefaultController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let pullAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let cancelAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingSource.start !== undefined) {\n    startAlgorithm = () => underlyingSource.start!(controller);\n  }\n  if (underlyingSource.pull !== undefined) {\n    pullAlgorithm = () => underlyingSource.pull!(controller);\n  }\n  if (underlyingSource.cancel !== undefined) {\n    cancelAlgorithm = reason => underlyingSource.cancel!(reason);\n  }\n\n  SetUpReadableStreamDefaultController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n}\n\n// Helper functions for the ReadableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n}\n","import {\n  CreateReadableByteStream,\n  CreateReadableStream,\n  IsReadableStream,\n  ReadableByteStream,\n  ReadableStream,\n  ReadableStreamCancel,\n  ReadableStreamReader\n} from '../readable-stream';\nimport { ReadableStreamReaderGenericRelease } from './generic-reader';\nimport {\n  AcquireReadableStreamDefaultReader,\n  IsReadableStreamDefaultReader,\n  ReadableStreamDefaultReaderRead,\n  ReadRequest\n} from './default-reader';\nimport {\n  AcquireReadableStreamBYOBReader,\n  IsReadableStreamBYOBReader,\n  ReadableStreamBYOBReaderRead,\n  ReadIntoRequest\n} from './byob-reader';\nimport assert from '../../stub/assert';\nimport { newPromise, promiseResolvedWith, queueMicrotask, uponRejection } from '../helpers/webidl';\nimport {\n  ReadableStreamDefaultController,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError\n} from './default-controller';\nimport {\n  IsReadableByteStreamController,\n  ReadableByteStreamControllerClose,\n  ReadableByteStreamControllerEnqueue,\n  ReadableByteStreamControllerError,\n  ReadableByteStreamControllerGetBYOBRequest,\n  ReadableByteStreamControllerRespond,\n  ReadableByteStreamControllerRespondWithNewView\n} from './byte-stream-controller';\nimport { CreateArrayFromList } from '../abstract-ops/ecmascript';\nimport { CloneAsUint8Array } from '../abstract-ops/miscellaneous';\n\nexport function ReadableStreamTee<R>(stream: ReadableStream<R>,\n                                     cloneForBranch2: boolean): [ReadableStream<R>, ReadableStream<R>] {\n  assert(IsReadableStream(stream));\n  assert(typeof cloneForBranch2 === 'boolean');\n  if (IsReadableByteStreamController(stream._readableStreamController)) {\n    return ReadableByteStreamTee(stream as unknown as ReadableByteStream) as\n      unknown as [ReadableStream<R>, ReadableStream<R>];\n  }\n  return ReadableStreamDefaultTee(stream, cloneForBranch2);\n}\n\nexport function ReadableStreamDefaultTee<R>(stream: ReadableStream<R>,\n                                            cloneForBranch2: boolean): [ReadableStream<R>, ReadableStream<R>] {\n  assert(IsReadableStream(stream));\n  assert(typeof cloneForBranch2 === 'boolean');\n\n  const reader = AcquireReadableStreamDefaultReader<R>(stream);\n\n  let reading = false;\n  let readAgain = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1: any;\n  let reason2: any;\n  let branch1: ReadableStream<R>;\n  let branch2: ReadableStream<R>;\n\n  let resolveCancelPromise: (value: undefined | Promise<undefined>) => void;\n  const cancelPromise = newPromise<undefined>(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function pullAlgorithm(): Promise<void> {\n    if (reading) {\n      readAgain = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgain = false;\n          const chunk1 = chunk;\n          const chunk2 = chunk;\n\n          // There is no way to access the cloning code right now in the reference implementation.\n          // If we add one then we'll need an implementation for serializable objects.\n          // if (!canceled2 && cloneForBranch2) {\n          //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n          // }\n\n          if (!canceled1) {\n            ReadableStreamDefaultControllerEnqueue(\n              branch1._readableStreamController as ReadableStreamDefaultController<R>,\n              chunk1\n            );\n          }\n          if (!canceled2) {\n            ReadableStreamDefaultControllerEnqueue(\n              branch2._readableStreamController as ReadableStreamDefaultController<R>,\n              chunk2\n            );\n          }\n\n          reading = false;\n          if (readAgain) {\n            pullAlgorithm();\n          }\n        });\n      },\n      _closeSteps: () => {\n        reading = false;\n        if (!canceled1) {\n          ReadableStreamDefaultControllerClose(branch1._readableStreamController as ReadableStreamDefaultController<R>);\n        }\n        if (!canceled2) {\n          ReadableStreamDefaultControllerClose(branch2._readableStreamController as ReadableStreamDefaultController<R>);\n        }\n\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function cancel1Algorithm(reason: any): Promise<void> {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason: any): Promise<void> {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm() {\n    // do nothing\n  }\n\n  branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n  branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n\n  uponRejection(reader._closedPromise, (r: any) => {\n    ReadableStreamDefaultControllerError(branch1._readableStreamController as ReadableStreamDefaultController<R>, r);\n    ReadableStreamDefaultControllerError(branch2._readableStreamController as ReadableStreamDefaultController<R>, r);\n    if (!canceled1 || !canceled2) {\n      resolveCancelPromise(undefined);\n    }\n  });\n\n  return [branch1, branch2];\n}\n\nexport function ReadableByteStreamTee(stream: ReadableByteStream): [ReadableByteStream, ReadableByteStream] {\n  assert(IsReadableStream(stream));\n  assert(IsReadableByteStreamController(stream._readableStreamController));\n\n  let reader: ReadableStreamReader<Uint8Array> = AcquireReadableStreamDefaultReader(stream);\n  let reading = false;\n  let readAgainForBranch1 = false;\n  let readAgainForBranch2 = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1: any;\n  let reason2: any;\n  let branch1: ReadableByteStream;\n  let branch2: ReadableByteStream;\n\n  let resolveCancelPromise: (value: undefined | Promise<undefined>) => void;\n  const cancelPromise = newPromise<void>(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function forwardReaderError(thisReader: ReadableStreamReader<Uint8Array>) {\n    uponRejection(thisReader._closedPromise, r => {\n      if (thisReader !== reader) {\n        return;\n      }\n      ReadableByteStreamControllerError(branch1._readableStreamController, r);\n      ReadableByteStreamControllerError(branch2._readableStreamController, r);\n      if (!canceled1 || !canceled2) {\n        resolveCancelPromise(undefined);\n      }\n    });\n  }\n\n  function pullWithDefaultReader() {\n    if (IsReadableStreamBYOBReader(reader)) {\n      assert(reader._readIntoRequests.length === 0);\n      ReadableStreamReaderGenericRelease(reader);\n\n      reader = AcquireReadableStreamDefaultReader(stream);\n      forwardReaderError(reader);\n    }\n\n    const readRequest: ReadRequest<Uint8Array> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgainForBranch1 = false;\n          readAgainForBranch2 = false;\n\n          const chunk1 = chunk;\n          let chunk2 = chunk;\n          if (!canceled1 && !canceled2) {\n            try {\n              chunk2 = CloneAsUint8Array(chunk);\n            } catch (cloneE) {\n              ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n              ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n              resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n              return;\n            }\n          }\n\n          if (!canceled1) {\n            ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n          }\n          if (!canceled2) {\n            ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n          }\n\n          reading = false;\n          if (readAgainForBranch1) {\n            pull1Algorithm();\n          } else if (readAgainForBranch2) {\n            pull2Algorithm();\n          }\n        });\n      },\n      _closeSteps: () => {\n        reading = false;\n        if (!canceled1) {\n          ReadableByteStreamControllerClose(branch1._readableStreamController);\n        }\n        if (!canceled2) {\n          ReadableByteStreamControllerClose(branch2._readableStreamController);\n        }\n        if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n        }\n        if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n        }\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n  }\n\n  function pullWithBYOBReader(view: ArrayBufferView, forBranch2: boolean) {\n    if (IsReadableStreamDefaultReader<Uint8Array>(reader)) {\n      assert(reader._readRequests.length === 0);\n      ReadableStreamReaderGenericRelease(reader);\n\n      reader = AcquireReadableStreamBYOBReader(stream);\n      forwardReaderError(reader);\n    }\n\n    const byobBranch = forBranch2 ? branch2 : branch1;\n    const otherBranch = forBranch2 ? branch1 : branch2;\n\n    const readIntoRequest: ReadIntoRequest<ArrayBufferView> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgainForBranch1 = false;\n          readAgainForBranch2 = false;\n\n          const byobCanceled = forBranch2 ? canceled2 : canceled1;\n          const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n          if (!otherCanceled) {\n            let clonedChunk;\n            try {\n              clonedChunk = CloneAsUint8Array(chunk);\n            } catch (cloneE) {\n              ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n              ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n              resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n              return;\n            }\n            if (!byobCanceled) {\n              ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n            }\n            ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n          } else if (!byobCanceled) {\n            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n          }\n\n          reading = false;\n          if (readAgainForBranch1) {\n            pull1Algorithm();\n          } else if (readAgainForBranch2) {\n            pull2Algorithm();\n          }\n        });\n      },\n      _closeSteps: chunk => {\n        reading = false;\n\n        const byobCanceled = forBranch2 ? canceled2 : canceled1;\n        const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n        if (!byobCanceled) {\n          ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n        }\n        if (!otherCanceled) {\n          ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n        }\n\n        if (chunk !== undefined) {\n          assert(chunk.byteLength === 0);\n\n          if (!byobCanceled) {\n            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n          }\n          if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n            ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n          }\n        }\n\n        if (!byobCanceled || !otherCanceled) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);\n  }\n\n  function pull1Algorithm(): Promise<void> {\n    if (reading) {\n      readAgainForBranch1 = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n    if (byobRequest === null) {\n      pullWithDefaultReader();\n    } else {\n      pullWithBYOBReader(byobRequest._view!, false);\n    }\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function pull2Algorithm(): Promise<void> {\n    if (reading) {\n      readAgainForBranch2 = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n    if (byobRequest === null) {\n      pullWithDefaultReader();\n    } else {\n      pullWithBYOBReader(byobRequest._view!, true);\n    }\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function cancel1Algorithm(reason: any): Promise<void> {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason: any): Promise<void> {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm(): void {\n    return;\n  }\n\n  branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n  branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n\n  forwardReaderError(reader);\n\n  return [branch1, branch2];\n}\n","import { assertDictionary, assertFunction, convertUnsignedLongLongWithEnforceRange } from './basic';\nimport {\n  ReadableStreamController,\n  UnderlyingByteSource,\n  UnderlyingDefaultOrByteSource,\n  UnderlyingDefaultOrByteSourcePullCallback,\n  UnderlyingDefaultOrByteSourceStartCallback,\n  UnderlyingSource,\n  UnderlyingSourceCancelCallback,\n  ValidatedUnderlyingDefaultOrByteSource\n} from '../readable-stream/underlying-source';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\n\nexport function convertUnderlyingDefaultOrByteSource<R>(\n  source: UnderlyingSource<R> | UnderlyingByteSource | null,\n  context: string\n): ValidatedUnderlyingDefaultOrByteSource<R> {\n  assertDictionary(source, context);\n  const original = source as (UnderlyingDefaultOrByteSource<R> | null);\n  const autoAllocateChunkSize = original?.autoAllocateChunkSize;\n  const cancel = original?.cancel;\n  const pull = original?.pull;\n  const start = original?.start;\n  const type = original?.type;\n  return {\n    autoAllocateChunkSize: autoAllocateChunkSize === undefined ?\n      undefined :\n      convertUnsignedLongLongWithEnforceRange(\n        autoAllocateChunkSize,\n        `${context} has member 'autoAllocateChunkSize' that`\n      ),\n    cancel: cancel === undefined ?\n      undefined :\n      convertUnderlyingSourceCancelCallback(cancel, original!, `${context} has member 'cancel' that`),\n    pull: pull === undefined ?\n      undefined :\n      convertUnderlyingSourcePullCallback(pull, original!, `${context} has member 'pull' that`),\n    start: start === undefined ?\n      undefined :\n      convertUnderlyingSourceStartCallback(start, original!, `${context} has member 'start' that`),\n    type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)\n  };\n}\n\nfunction convertUnderlyingSourceCancelCallback(\n  fn: UnderlyingSourceCancelCallback,\n  original: UnderlyingDefaultOrByteSource,\n  context: string\n): (reason: any) => Promise<void> {\n  assertFunction(fn, context);\n  return (reason: any) => promiseCall(fn, original, [reason]);\n}\n\nfunction convertUnderlyingSourcePullCallback<R>(\n  fn: UnderlyingDefaultOrByteSourcePullCallback<R>,\n  original: UnderlyingDefaultOrByteSource<R>,\n  context: string\n): (controller: ReadableStreamController<R>) => Promise<void> {\n  assertFunction(fn, context);\n  return (controller: ReadableStreamController<R>) => promiseCall(fn, original, [controller]);\n}\n\nfunction convertUnderlyingSourceStartCallback<R>(\n  fn: UnderlyingDefaultOrByteSourceStartCallback<R>,\n  original: UnderlyingDefaultOrByteSource<R>,\n  context: string\n): UnderlyingDefaultOrByteSourceStartCallback<R> {\n  assertFunction(fn, context);\n  return (controller: ReadableStreamController<R>) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertReadableStreamType(type: string, context: string): 'bytes' {\n  type = `${type}`;\n  if (type !== 'bytes') {\n    throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\n  }\n  return type;\n}\n","import { assertDictionary } from './basic';\nimport { ReadableStreamGetReaderOptions } from '../readable-stream/reader-options';\n\nexport function convertReaderOptions(options: ReadableStreamGetReaderOptions | null | undefined,\n                                     context: string): ReadableStreamGetReaderOptions {\n  assertDictionary(options, context);\n  const mode = options?.mode;\n  return {\n    mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\n  };\n}\n\nfunction convertReadableStreamReaderMode(mode: string, context: string): 'byob' {\n  mode = `${mode}`;\n  if (mode !== 'byob') {\n    throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\n  }\n  return mode;\n}\n","import { assertDictionary } from './basic';\nimport { StreamPipeOptions, ValidatedStreamPipeOptions } from '../readable-stream/pipe-options';\nimport { AbortSignal, isAbortSignal } from '../abort-signal';\n\nexport function convertPipeOptions(options: StreamPipeOptions | null | undefined,\n                                   context: string): ValidatedStreamPipeOptions {\n  assertDictionary(options, context);\n  const preventAbort = options?.preventAbort;\n  const preventCancel = options?.preventCancel;\n  const preventClose = options?.preventClose;\n  const signal = options?.signal;\n  if (signal !== undefined) {\n    assertAbortSignal(signal, `${context} has member 'signal' that`);\n  }\n  return {\n    preventAbort: Boolean(preventAbort),\n    preventCancel: Boolean(preventCancel),\n    preventClose: Boolean(preventClose),\n    signal\n  };\n}\n\nfunction assertAbortSignal(signal: unknown, context: string): asserts signal is AbortSignal {\n  if (!isAbortSignal(signal)) {\n    throw new TypeError(`${context} is not an AbortSignal.`);\n  }\n}\n","import assert from '../stub/assert';\nimport {\n  promiseRejectedWith,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  transformPromiseWith\n} from './helpers/webidl';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { AcquireReadableStreamAsyncIterator, ReadableStreamAsyncIterator } from './readable-stream/async-iterator';\nimport { defaultReaderClosedPromiseReject, defaultReaderClosedPromiseResolve } from './readable-stream/generic-reader';\nimport {\n  AcquireReadableStreamDefaultReader,\n  IsReadableStreamDefaultReader,\n  ReadableStreamDefaultReader,\n  ReadableStreamDefaultReadResult\n} from './readable-stream/default-reader';\nimport {\n  AcquireReadableStreamBYOBReader,\n  IsReadableStreamBYOBReader,\n  ReadableStreamBYOBReader,\n  ReadableStreamBYOBReadResult\n} from './readable-stream/byob-reader';\nimport { ReadableStreamPipeTo } from './readable-stream/pipe';\nimport { ReadableStreamTee } from './readable-stream/tee';\nimport { IsWritableStream, IsWritableStreamLocked, WritableStream } from './writable-stream';\nimport { SimpleQueue } from './simple-queue';\nimport {\n  ReadableByteStreamController,\n  ReadableStreamBYOBRequest,\n  SetUpReadableByteStreamController,\n  SetUpReadableByteStreamControllerFromUnderlyingSource\n} from './readable-stream/byte-stream-controller';\nimport {\n  ReadableStreamDefaultController,\n  SetUpReadableStreamDefaultController,\n  SetUpReadableStreamDefaultControllerFromUnderlyingSource\n} from './readable-stream/default-controller';\nimport {\n  UnderlyingByteSource,\n  UnderlyingByteSourcePullCallback,\n  UnderlyingByteSourceStartCallback,\n  UnderlyingSource,\n  UnderlyingSourceCancelCallback,\n  UnderlyingSourcePullCallback,\n  UnderlyingSourceStartCallback\n} from './readable-stream/underlying-source';\nimport { noop } from '../utils';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { CreateArrayFromList } from './abstract-ops/ecmascript';\nimport { CancelSteps } from './abstract-ops/internal-methods';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { assertObject, assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport { convertUnderlyingDefaultOrByteSource } from './validators/underlying-source';\nimport { ReadableStreamGetReaderOptions } from './readable-stream/reader-options';\nimport { convertReaderOptions } from './validators/reader-options';\nimport { StreamPipeOptions, ValidatedStreamPipeOptions } from './readable-stream/pipe-options';\nimport { ReadableStreamIteratorOptions } from './readable-stream/iterator-options';\nimport { convertIteratorOptions } from './validators/iterator-options';\nimport { convertPipeOptions } from './validators/pipe-options';\nimport { ReadableWritablePair } from './readable-stream/readable-writable-pair';\nimport { convertReadableWritablePair } from './validators/readable-writable-pair';\n\nexport type ReadableByteStream = ReadableStream<Uint8Array> & {\n  _readableStreamController: ReadableByteStreamController\n};\n\ntype ReadableStreamState = 'readable' | 'closed' | 'errored';\n\n/**\n * A readable stream represents a source of data, from which you can read.\n *\n * @public\n */\nexport class ReadableStream<R = any> {\n  /** @internal */\n  _state!: ReadableStreamState;\n  /** @internal */\n  _reader: ReadableStreamReader<R> | undefined;\n  /** @internal */\n  _storedError: any;\n  /** @internal */\n  _disturbed!: boolean;\n  /** @internal */\n  _readableStreamController!: ReadableStreamDefaultController<R> | ReadableByteStreamController;\n\n  constructor(underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number; size?: undefined });\n  constructor(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>);\n  constructor(rawUnderlyingSource: UnderlyingSource<R> | UnderlyingByteSource | null | undefined = {},\n              rawStrategy: QueuingStrategy<R> | null | undefined = {}) {\n    if (rawUnderlyingSource === undefined) {\n      rawUnderlyingSource = null;\n    } else {\n      assertObject(rawUnderlyingSource, 'First parameter');\n    }\n\n    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n    const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n\n    InitializeReadableStream(this);\n\n    if (underlyingSource.type === 'bytes') {\n      if (strategy.size !== undefined) {\n        throw new RangeError('The strategy for a byte stream cannot have a size function');\n      }\n      const highWaterMark = ExtractHighWaterMark(strategy, 0);\n      SetUpReadableByteStreamControllerFromUnderlyingSource(\n        this as unknown as ReadableByteStream,\n        underlyingSource,\n        highWaterMark\n      );\n    } else {\n      assert(underlyingSource.type === undefined);\n      const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n      const highWaterMark = ExtractHighWaterMark(strategy, 1);\n      SetUpReadableStreamDefaultControllerFromUnderlyingSource(\n        this,\n        underlyingSource,\n        highWaterMark,\n        sizeAlgorithm\n      );\n    }\n  }\n\n  /**\n   * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n   */\n  get locked(): boolean {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsReadableStreamLocked(this);\n  }\n\n  /**\n   * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n   *\n   * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n   * method, which might or might not use it.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('cancel'));\n    }\n\n    if (IsReadableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n    }\n\n    return ReadableStreamCancel(this, reason);\n  }\n\n  /**\n   * Creates a {@link ReadableStreamBYOBReader} and locks the stream to the new reader.\n   *\n   * This call behaves the same way as the no-argument variant, except that it only works on readable byte streams,\n   * i.e. streams which were constructed specifically with the ability to handle \"bring your own buffer\" reading.\n   * The returned BYOB reader provides the ability to directly read individual chunks from the stream via its\n   * {@link ReadableStreamBYOBReader.read | read()} method, into developer-supplied buffers, allowing more precise\n   * control over allocation.\n   */\n  getReader({ mode }: { mode: 'byob' }): ReadableStreamBYOBReader;\n  /**\n   * Creates a {@link ReadableStreamDefaultReader} and locks the stream to the new reader.\n   * While the stream is locked, no other reader can be acquired until this one is released.\n   *\n   * This functionality is especially useful for creating abstractions that desire the ability to consume a stream\n   * in its entirety. By getting a reader for the stream, you can ensure nobody else can interleave reads with yours\n   * or cancel the stream, which would interfere with your abstraction.\n   */\n  getReader(): ReadableStreamDefaultReader<R>;\n  getReader(\n    rawOptions: ReadableStreamGetReaderOptions | null | undefined = undefined\n  ): ReadableStreamDefaultReader<R> | ReadableStreamBYOBReader {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('getReader');\n    }\n\n    const options = convertReaderOptions(rawOptions, 'First parameter');\n\n    if (options.mode === undefined) {\n      return AcquireReadableStreamDefaultReader(this);\n    }\n\n    assert(options.mode === 'byob');\n    return AcquireReadableStreamBYOBReader(this as unknown as ReadableByteStream);\n  }\n\n  /**\n   * Provides a convenient, chainable way of piping this readable stream through a transform stream\n   * (or any other `{ writable, readable }` pair). It simply {@link ReadableStream.pipeTo | pipes} the stream\n   * into the writable side of the supplied pair, and returns the readable side for further use.\n   *\n   * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n   */\n  pipeThrough<RS extends ReadableStream>(\n    transform: { readable: RS; writable: WritableStream<R> },\n    options?: StreamPipeOptions\n  ): RS;\n  pipeThrough<RS extends ReadableStream>(\n    rawTransform: { readable: RS; writable: WritableStream<R> } | null | undefined,\n    rawOptions: StreamPipeOptions | null | undefined = {}\n  ): RS {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('pipeThrough');\n    }\n    assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n\n    const transform = convertReadableWritablePair(rawTransform, 'First parameter');\n    const options = convertPipeOptions(rawOptions, 'Second parameter');\n\n    if (IsReadableStreamLocked(this)) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n    }\n    if (IsWritableStreamLocked(transform.writable)) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n    }\n\n    const promise = ReadableStreamPipeTo(\n      this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal\n    );\n\n    setPromiseIsHandledToTrue(promise);\n\n    return transform.readable;\n  }\n\n  /**\n   * Pipes this readable stream to a given writable stream. The way in which the piping process behaves under\n   * various error conditions can be customized with a number of passed options. It returns a promise that fulfills\n   * when the piping process completes successfully, or rejects if any errors were encountered.\n   *\n   * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n   */\n  pipeTo(destination: WritableStream<R>, options?: StreamPipeOptions): Promise<void>;\n  pipeTo(destination: WritableStream<R> | null | undefined,\n         rawOptions: StreamPipeOptions | null | undefined = {}): Promise<void> {\n    if (!IsReadableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('pipeTo'));\n    }\n\n    if (destination === undefined) {\n      return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\n    }\n    if (!IsWritableStream(destination)) {\n      return promiseRejectedWith(\n        new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`)\n      );\n    }\n\n    let options: ValidatedStreamPipeOptions;\n    try {\n      options = convertPipeOptions(rawOptions, 'Second parameter');\n    } catch (e) {\n      return promiseRejectedWith(e);\n    }\n\n    if (IsReadableStreamLocked(this)) {\n      return promiseRejectedWith(\n        new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream')\n      );\n    }\n    if (IsWritableStreamLocked(destination)) {\n      return promiseRejectedWith(\n        new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream')\n      );\n    }\n\n    return ReadableStreamPipeTo<R>(\n      this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal\n    );\n  }\n\n  /**\n   * Tees this readable stream, returning a two-element array containing the two resulting branches as\n   * new {@link ReadableStream} instances.\n   *\n   * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n   * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n   * propagated to the stream's underlying source.\n   *\n   * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n   * this could allow interference between the two branches.\n   */\n  tee(): [ReadableStream<R>, ReadableStream<R>] {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('tee');\n    }\n\n    const branches = ReadableStreamTee(this, false);\n    return CreateArrayFromList(branches);\n  }\n\n  /**\n   * Asynchronously iterates over the chunks in the stream's internal queue.\n   *\n   * Asynchronously iterating over the stream will lock it, preventing any other consumer from acquiring a reader.\n   * The lock will be released if the async iterator's {@link ReadableStreamAsyncIterator.return | return()} method\n   * is called, e.g. by breaking out of the loop.\n   *\n   * By default, calling the async iterator's {@link ReadableStreamAsyncIterator.return | return()} method will also\n   * cancel the stream. To prevent this, use the stream's {@link ReadableStream.values | values()} method, passing\n   * `true` for the `preventCancel` option.\n   */\n  values(options?: ReadableStreamIteratorOptions): ReadableStreamAsyncIterator<R>;\n  values(rawOptions: ReadableStreamIteratorOptions | null | undefined = undefined): ReadableStreamAsyncIterator<R> {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('values');\n    }\n\n    const options = convertIteratorOptions(rawOptions, 'First parameter');\n    return AcquireReadableStreamAsyncIterator<R>(this, options.preventCancel);\n  }\n\n  /**\n   * {@inheritDoc ReadableStream.values}\n   */\n  [Symbol.asyncIterator]: (options?: ReadableStreamIteratorOptions) => ReadableStreamAsyncIterator<R>;\n}\n\nObject.defineProperties(ReadableStream.prototype, {\n  cancel: { enumerable: true },\n  getReader: { enumerable: true },\n  pipeThrough: { enumerable: true },\n  pipeTo: { enumerable: true },\n  tee: { enumerable: true },\n  values: { enumerable: true },\n  locked: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStream.prototype, Symbol.toStringTag, {\n    value: 'ReadableStream',\n    configurable: true\n  });\n}\nif (typeof Symbol.asyncIterator === 'symbol') {\n  Object.defineProperty(ReadableStream.prototype, Symbol.asyncIterator, {\n    value: ReadableStream.prototype.values,\n    writable: true,\n    configurable: true\n  });\n}\n\nexport {\n  ReadableStreamAsyncIterator,\n  ReadableStreamDefaultReadResult,\n  ReadableStreamBYOBReadResult,\n  UnderlyingByteSource,\n  UnderlyingSource,\n  UnderlyingSourceStartCallback,\n  UnderlyingSourcePullCallback,\n  UnderlyingSourceCancelCallback,\n  UnderlyingByteSourceStartCallback,\n  UnderlyingByteSourcePullCallback,\n  StreamPipeOptions,\n  ReadableWritablePair,\n  ReadableStreamIteratorOptions\n};\n\n// Abstract operations for the ReadableStream.\n\n// Throws if and only if startAlgorithm throws.\nexport function CreateReadableStream<R>(startAlgorithm: () => void | PromiseLike<void>,\n                                        pullAlgorithm: () => Promise<void>,\n                                        cancelAlgorithm: (reason: any) => Promise<void>,\n                                        highWaterMark = 1,\n                                        sizeAlgorithm: QueuingStrategySizeCallback<R> = () => 1): ReadableStream<R> {\n  assert(IsNonNegativeNumber(highWaterMark));\n\n  const stream: ReadableStream<R> = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller: ReadableStreamDefaultController<R> = Object.create(ReadableStreamDefaultController.prototype);\n  SetUpReadableStreamDefaultController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n\n  return stream;\n}\n\n// Throws if and only if startAlgorithm throws.\nexport function CreateReadableByteStream(\n  startAlgorithm: () => void | PromiseLike<void>,\n  pullAlgorithm: () => Promise<void>,\n  cancelAlgorithm: (reason: any) => Promise<void>\n): ReadableByteStream {\n  const stream: ReadableByteStream = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller: ReadableByteStreamController = Object.create(ReadableByteStreamController.prototype);\n  SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n\n  return stream;\n}\n\nfunction InitializeReadableStream(stream: ReadableStream) {\n  stream._state = 'readable';\n  stream._reader = undefined;\n  stream._storedError = undefined;\n  stream._disturbed = false;\n}\n\nexport function IsReadableStream(x: unknown): x is ReadableStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n    return false;\n  }\n\n  return x instanceof ReadableStream;\n}\n\nexport function IsReadableStreamDisturbed(stream: ReadableStream): boolean {\n  assert(IsReadableStream(stream));\n\n  return stream._disturbed;\n}\n\nexport function IsReadableStreamLocked(stream: ReadableStream): boolean {\n  assert(IsReadableStream(stream));\n\n  if (stream._reader === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamCancel<R>(stream: ReadableStream<R>, reason: any): Promise<undefined> {\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    return promiseResolvedWith(undefined);\n  }\n  if (stream._state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  ReadableStreamClose(stream);\n\n  const reader = stream._reader;\n  if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n    reader._readIntoRequests.forEach(readIntoRequest => {\n      readIntoRequest._closeSteps(undefined);\n    });\n    reader._readIntoRequests = new SimpleQueue();\n  }\n\n  const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n  return transformPromiseWith(sourceCancelPromise, noop);\n}\n\nexport function ReadableStreamClose<R>(stream: ReadableStream<R>): void {\n  assert(stream._state === 'readable');\n\n  stream._state = 'closed';\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return;\n  }\n\n  defaultReaderClosedPromiseResolve(reader);\n\n  if (IsReadableStreamDefaultReader<R>(reader)) {\n    reader._readRequests.forEach(readRequest => {\n      readRequest._closeSteps();\n    });\n    reader._readRequests = new SimpleQueue();\n  }\n}\n\nexport function ReadableStreamError<R>(stream: ReadableStream<R>, e: any): void {\n  assert(IsReadableStream(stream));\n  assert(stream._state === 'readable');\n\n  stream._state = 'errored';\n  stream._storedError = e;\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return;\n  }\n\n  defaultReaderClosedPromiseReject(reader, e);\n\n  if (IsReadableStreamDefaultReader<R>(reader)) {\n    reader._readRequests.forEach(readRequest => {\n      readRequest._errorSteps(e);\n    });\n\n    reader._readRequests = new SimpleQueue();\n  } else {\n    assert(IsReadableStreamBYOBReader(reader));\n\n    reader._readIntoRequests.forEach(readIntoRequest => {\n      readIntoRequest._errorSteps(e);\n    });\n\n    reader._readIntoRequests = new SimpleQueue();\n  }\n}\n\n// Readers\n\nexport type ReadableStreamReader<R> = ReadableStreamDefaultReader<R> | ReadableStreamBYOBReader;\n\nexport {\n  ReadableStreamDefaultReader,\n  ReadableStreamBYOBReader\n};\n\n// Controllers\n\nexport {\n  ReadableStreamDefaultController,\n  ReadableStreamBYOBRequest,\n  ReadableByteStreamController\n};\n\n// Helper functions for the ReadableStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n}\n","import { assertDictionary, assertRequiredField } from './basic';\nimport { ReadableStream } from '../readable-stream';\nimport { WritableStream } from '../writable-stream';\nimport { assertReadableStream } from './readable-stream';\nimport { assertWritableStream } from './writable-stream';\n\nexport function convertReadableWritablePair<RS extends ReadableStream, WS extends WritableStream>(\n  pair: { readable: RS; writable: WS } | null | undefined,\n  context: string\n): { readable: RS; writable: WS } {\n  assertDictionary(pair, context);\n\n  const readable = pair?.readable;\n  assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n  assertReadableStream(readable, `${context} has member 'readable' that`);\n\n  const writable = pair?.writable;\n  assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n  assertWritableStream(writable, `${context} has member 'writable' that`);\n\n  return { readable, writable };\n}\n","import { assertDictionary } from './basic';\nimport {\n  ReadableStreamIteratorOptions,\n  ValidatedReadableStreamIteratorOptions\n} from '../readable-stream/iterator-options';\n\nexport function convertIteratorOptions(options: ReadableStreamIteratorOptions | null | undefined,\n                                       context: string): ValidatedReadableStreamIteratorOptions {\n  assertDictionary(options, context);\n  const preventCancel = options?.preventCancel;\n  return { preventCancel: Boolean(preventCancel) };\n}\n","import { QueuingStrategyInit } from '../queuing-strategy';\nimport { assertDictionary, assertRequiredField, convertUnrestrictedDouble } from './basic';\n\nexport function convertQueuingStrategyInit(init: QueuingStrategyInit | null | undefined,\n                                           context: string): QueuingStrategyInit {\n  assertDictionary(init, context);\n  const highWaterMark = init?.highWaterMark;\n  assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n  return {\n    highWaterMark: convertUnrestrictedDouble(highWaterMark)\n  };\n}\n","import { QueuingStrategy, QueuingStrategyInit } from './queuing-strategy';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategyInit } from './validators/queuing-strategy-init';\n\n// The size function must not have a prototype property nor be a constructor\nconst byteLengthSizeFunction = (chunk: ArrayBufferView): number => {\n  return chunk.byteLength;\n};\nObject.defineProperty(byteLengthSizeFunction, 'name', {\n  value: 'size',\n  configurable: true\n});\n\n/**\n * A queuing strategy that counts the number of bytes in each chunk.\n *\n * @public\n */\nexport default class ByteLengthQueuingStrategy implements QueuingStrategy<ArrayBufferView> {\n  /** @internal */\n  readonly _byteLengthQueuingStrategyHighWaterMark: number;\n\n  constructor(options: QueuingStrategyInit) {\n    assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n    options = convertQueuingStrategyInit(options, 'First parameter');\n    this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n\n  /**\n   * Returns the high water mark provided to the constructor.\n   */\n  get highWaterMark(): number {\n    if (!IsByteLengthQueuingStrategy(this)) {\n      throw byteLengthBrandCheckException('highWaterMark');\n    }\n    return this._byteLengthQueuingStrategyHighWaterMark;\n  }\n\n  /**\n   * Measures the size of `chunk` by returning the value of its `byteLength` property.\n   */\n  get size(): (chunk: ArrayBufferView) => number {\n    if (!IsByteLengthQueuingStrategy(this)) {\n      throw byteLengthBrandCheckException('size');\n    }\n    return byteLengthSizeFunction;\n  }\n}\n\nObject.defineProperties(ByteLengthQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ByteLengthQueuingStrategy.prototype, Symbol.toStringTag, {\n    value: 'ByteLengthQueuingStrategy',\n    configurable: true\n  });\n}\n\n// Helper functions for the ByteLengthQueuingStrategy.\n\nfunction byteLengthBrandCheckException(name: string): TypeError {\n  return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\n}\n\nexport function IsByteLengthQueuingStrategy(x: any): x is ByteLengthQueuingStrategy {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n    return false;\n  }\n\n  return x instanceof ByteLengthQueuingStrategy;\n}\n","import { QueuingStrategy, QueuingStrategyInit } from './queuing-strategy';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategyInit } from './validators/queuing-strategy-init';\n\n// The size function must not have a prototype property nor be a constructor\nconst countSizeFunction = (): 1 => {\n  return 1;\n};\nObject.defineProperty(countSizeFunction, 'name', {\n  value: 'size',\n  configurable: true\n});\n\n/**\n * A queuing strategy that counts the number of chunks.\n *\n * @public\n */\nexport default class CountQueuingStrategy implements QueuingStrategy<any> {\n  /** @internal */\n  readonly _countQueuingStrategyHighWaterMark!: number;\n\n  constructor(options: QueuingStrategyInit) {\n    assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n    options = convertQueuingStrategyInit(options, 'First parameter');\n    this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n\n  /**\n   * Returns the high water mark provided to the constructor.\n   */\n  get highWaterMark(): number {\n    if (!IsCountQueuingStrategy(this)) {\n      throw countBrandCheckException('highWaterMark');\n    }\n    return this._countQueuingStrategyHighWaterMark;\n  }\n\n  /**\n   * Measures the size of `chunk` by always returning 1.\n   * This ensures that the total queue size is a count of the number of chunks in the queue.\n   */\n  get size(): (chunk: any) => 1 {\n    if (!IsCountQueuingStrategy(this)) {\n      throw countBrandCheckException('size');\n    }\n    return countSizeFunction;\n  }\n}\n\nObject.defineProperties(CountQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(CountQueuingStrategy.prototype, Symbol.toStringTag, {\n    value: 'CountQueuingStrategy',\n    configurable: true\n  });\n}\n\n// Helper functions for the CountQueuingStrategy.\n\nfunction countBrandCheckException(name: string): TypeError {\n  return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\n}\n\nexport function IsCountQueuingStrategy(x: any): x is CountQueuingStrategy {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n    return false;\n  }\n\n  return x instanceof CountQueuingStrategy;\n}\n","import { assertDictionary, assertFunction } from './basic';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\nimport {\n  Transformer,\n  TransformerFlushCallback,\n  TransformerStartCallback,\n  TransformerTransformCallback,\n  ValidatedTransformer\n} from '../transform-stream/transformer';\nimport { TransformStreamDefaultController } from '../transform-stream';\n\nexport function convertTransformer<I, O>(original: Transformer<I, O> | null,\n                                         context: string): ValidatedTransformer<I, O> {\n  assertDictionary(original, context);\n  const flush = original?.flush;\n  const readableType = original?.readableType;\n  const start = original?.start;\n  const transform = original?.transform;\n  const writableType = original?.writableType;\n  return {\n    flush: flush === undefined ?\n      undefined :\n      convertTransformerFlushCallback(flush, original!, `${context} has member 'flush' that`),\n    readableType,\n    start: start === undefined ?\n      undefined :\n      convertTransformerStartCallback(start, original!, `${context} has member 'start' that`),\n    transform: transform === undefined ?\n      undefined :\n      convertTransformerTransformCallback(transform, original!, `${context} has member 'transform' that`),\n    writableType\n  };\n}\n\nfunction convertTransformerFlushCallback<I, O>(\n  fn: TransformerFlushCallback<O>,\n  original: Transformer<I, O>,\n  context: string\n): (controller: TransformStreamDefaultController<O>) => Promise<void> {\n  assertFunction(fn, context);\n  return (controller: TransformStreamDefaultController<O>) => promiseCall(fn, original, [controller]);\n}\n\nfunction convertTransformerStartCallback<I, O>(\n  fn: TransformerStartCallback<O>,\n  original: Transformer<I, O>,\n  context: string\n): TransformerStartCallback<O> {\n  assertFunction(fn, context);\n  return (controller: TransformStreamDefaultController<O>) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertTransformerTransformCallback<I, O>(\n  fn: TransformerTransformCallback<I, O>,\n  original: Transformer<I, O>,\n  context: string\n): (chunk: I, controller: TransformStreamDefaultController<O>) => Promise<void> {\n  assertFunction(fn, context);\n  return (chunk: I, controller: TransformStreamDefaultController<O>) => promiseCall(fn, original, [chunk, controller]);\n}\n","import assert from '../stub/assert';\nimport { newPromise, promiseRejectedWith, promiseResolvedWith, transformPromiseWith } from './helpers/webidl';\nimport { CreateReadableStream, ReadableStream, ReadableStreamDefaultController } from './readable-stream';\nimport {\n  ReadableStreamDefaultControllerCanCloseOrEnqueue,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError,\n  ReadableStreamDefaultControllerGetDesiredSize,\n  ReadableStreamDefaultControllerHasBackpressure\n} from './readable-stream/default-controller';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { CreateWritableStream, WritableStream, WritableStreamDefaultControllerErrorIfNeeded } from './writable-stream';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport {\n  Transformer,\n  TransformerFlushCallback,\n  TransformerStartCallback,\n  TransformerTransformCallback,\n  ValidatedTransformer\n} from './transform-stream/transformer';\nimport { convertTransformer } from './validators/transformer';\n\n// Class TransformStream\n\n/**\n * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n * made available for reading from the readable side.\n *\n * @public\n */\nexport class TransformStream<I = any, O = any> {\n  /** @internal */\n  _writable!: WritableStream<I>;\n  /** @internal */\n  _readable!: ReadableStream<O>;\n  /** @internal */\n  _backpressure!: boolean;\n  /** @internal */\n  _backpressureChangePromise!: Promise<void>;\n  /** @internal */\n  _backpressureChangePromise_resolve!: () => void;\n  /** @internal */\n  _transformStreamController!: TransformStreamDefaultController<O>;\n\n  constructor(\n    transformer?: Transformer<I, O>,\n    writableStrategy?: QueuingStrategy<I>,\n    readableStrategy?: QueuingStrategy<O>\n  );\n  constructor(rawTransformer: Transformer<I, O> | null | undefined = {},\n              rawWritableStrategy: QueuingStrategy<I> | null | undefined = {},\n              rawReadableStrategy: QueuingStrategy<O> | null | undefined = {}) {\n    if (rawTransformer === undefined) {\n      rawTransformer = null;\n    }\n\n    const writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n    const readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n\n    const transformer = convertTransformer(rawTransformer, 'First parameter');\n    if (transformer.readableType !== undefined) {\n      throw new RangeError('Invalid readableType specified');\n    }\n    if (transformer.writableType !== undefined) {\n      throw new RangeError('Invalid writableType specified');\n    }\n\n    const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n    const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n    const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n    const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n\n    let startPromise_resolve!: (value: void | PromiseLike<void>) => void;\n    const startPromise = newPromise<void>(resolve => {\n      startPromise_resolve = resolve;\n    });\n\n    InitializeTransformStream(\n      this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm\n    );\n    SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n\n    if (transformer.start !== undefined) {\n      startPromise_resolve(transformer.start(this._transformStreamController));\n    } else {\n      startPromise_resolve(undefined);\n    }\n  }\n\n  /**\n   * The readable side of the transform stream.\n   */\n  get readable(): ReadableStream<O> {\n    if (!IsTransformStream(this)) {\n      throw streamBrandCheckException('readable');\n    }\n\n    return this._readable;\n  }\n\n  /**\n   * The writable side of the transform stream.\n   */\n  get writable(): WritableStream<I> {\n    if (!IsTransformStream(this)) {\n      throw streamBrandCheckException('writable');\n    }\n\n    return this._writable;\n  }\n}\n\nObject.defineProperties(TransformStream.prototype, {\n  readable: { enumerable: true },\n  writable: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStream.prototype, Symbol.toStringTag, {\n    value: 'TransformStream',\n    configurable: true\n  });\n}\n\nexport {\n  Transformer,\n  TransformerStartCallback,\n  TransformerFlushCallback,\n  TransformerTransformCallback\n};\n\n// Transform Stream Abstract Operations\n\nexport function CreateTransformStream<I, O>(startAlgorithm: () => void | PromiseLike<void>,\n                                            transformAlgorithm: (chunk: I) => Promise<void>,\n                                            flushAlgorithm: () => Promise<void>,\n                                            writableHighWaterMark = 1,\n                                            writableSizeAlgorithm: QueuingStrategySizeCallback<I> = () => 1,\n                                            readableHighWaterMark = 0,\n                                            readableSizeAlgorithm: QueuingStrategySizeCallback<O> = () => 1) {\n  assert(IsNonNegativeNumber(writableHighWaterMark));\n  assert(IsNonNegativeNumber(readableHighWaterMark));\n\n  const stream: TransformStream<I, O> = Object.create(TransformStream.prototype);\n\n  let startPromise_resolve!: (value: void | PromiseLike<void>) => void;\n  const startPromise = newPromise<void>(resolve => {\n    startPromise_resolve = resolve;\n  });\n\n  InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark,\n                            readableSizeAlgorithm);\n\n  const controller: TransformStreamDefaultController<O> = Object.create(TransformStreamDefaultController.prototype);\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n\n  const startResult = startAlgorithm();\n  startPromise_resolve(startResult);\n  return stream;\n}\n\nfunction InitializeTransformStream<I, O>(stream: TransformStream<I, O>,\n                                         startPromise: Promise<void>,\n                                         writableHighWaterMark: number,\n                                         writableSizeAlgorithm: QueuingStrategySizeCallback<I>,\n                                         readableHighWaterMark: number,\n                                         readableSizeAlgorithm: QueuingStrategySizeCallback<O>) {\n  function startAlgorithm(): Promise<void> {\n    return startPromise;\n  }\n\n  function writeAlgorithm(chunk: I): Promise<void> {\n    return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n  }\n\n  function abortAlgorithm(reason: any): Promise<void> {\n    return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n  }\n\n  function closeAlgorithm(): Promise<void> {\n    return TransformStreamDefaultSinkCloseAlgorithm(stream);\n  }\n\n  stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm,\n                                          writableHighWaterMark, writableSizeAlgorithm);\n\n  function pullAlgorithm(): Promise<void> {\n    return TransformStreamDefaultSourcePullAlgorithm(stream);\n  }\n\n  function cancelAlgorithm(reason: any): Promise<void> {\n    TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n    return promiseResolvedWith(undefined);\n  }\n\n  stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark,\n                                          readableSizeAlgorithm);\n\n  // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n  stream._backpressure = undefined!;\n  stream._backpressureChangePromise = undefined!;\n  stream._backpressureChangePromise_resolve = undefined!;\n  TransformStreamSetBackpressure(stream, true);\n\n  stream._transformStreamController = undefined!;\n}\n\nfunction IsTransformStream(x: unknown): x is TransformStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n    return false;\n  }\n\n  return x instanceof TransformStream;\n}\n\n// This is a no-op if both sides are already errored.\nfunction TransformStreamError(stream: TransformStream, e: any) {\n  ReadableStreamDefaultControllerError(\n    stream._readable._readableStreamController as ReadableStreamDefaultController<any>,\n    e\n  );\n  TransformStreamErrorWritableAndUnblockWrite(stream, e);\n}\n\nfunction TransformStreamErrorWritableAndUnblockWrite(stream: TransformStream, e: any) {\n  TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n  WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n  if (stream._backpressure) {\n    // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n    // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n    // _backpressure is set.\n    TransformStreamSetBackpressure(stream, false);\n  }\n}\n\nfunction TransformStreamSetBackpressure(stream: TransformStream, backpressure: boolean) {\n  // Passes also when called during construction.\n  assert(stream._backpressure !== backpressure);\n\n  if (stream._backpressureChangePromise !== undefined) {\n    stream._backpressureChangePromise_resolve();\n  }\n\n  stream._backpressureChangePromise = newPromise(resolve => {\n    stream._backpressureChangePromise_resolve = resolve;\n  });\n\n  stream._backpressure = backpressure;\n}\n\n// Class TransformStreamDefaultController\n\n/**\n * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n *\n * @public\n */\nexport class TransformStreamDefaultController<O> {\n  /** @internal */\n  _controlledTransformStream: TransformStream<any, O>;\n  /** @internal */\n  _transformAlgorithm: (chunk: any) => Promise<void>;\n  /** @internal */\n  _flushAlgorithm: () => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n   */\n  get desiredSize(): number | null {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    const readableController = this._controlledTransformStream._readable._readableStreamController;\n    return ReadableStreamDefaultControllerGetDesiredSize(readableController as ReadableStreamDefaultController<O>);\n  }\n\n  /**\n   * Enqueues the given chunk `chunk` in the readable side of the controlled transform stream.\n   */\n  enqueue(chunk: O): void;\n  enqueue(chunk: O = undefined!): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    TransformStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors both the readable side and the writable side of the controlled transform stream, making all future\n   * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n   */\n  error(reason: any = undefined): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    TransformStreamDefaultControllerError(this, reason);\n  }\n\n  /**\n   * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n   * transformer only needs to consume a portion of the chunks written to the writable side.\n   */\n  terminate(): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('terminate');\n    }\n\n    TransformStreamDefaultControllerTerminate(this);\n  }\n}\n\nObject.defineProperties(TransformStreamDefaultController.prototype, {\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  terminate: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'TransformStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Transform Stream Default Controller Abstract Operations\n\nfunction IsTransformStreamDefaultController<O = any>(x: any): x is TransformStreamDefaultController<O> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n    return false;\n  }\n\n  return x instanceof TransformStreamDefaultController;\n}\n\nfunction SetUpTransformStreamDefaultController<I, O>(stream: TransformStream<I, O>,\n                                                     controller: TransformStreamDefaultController<O>,\n                                                     transformAlgorithm: (chunk: I) => Promise<void>,\n                                                     flushAlgorithm: () => Promise<void>) {\n  assert(IsTransformStream(stream));\n  assert(stream._transformStreamController === undefined);\n\n  controller._controlledTransformStream = stream;\n  stream._transformStreamController = controller;\n\n  controller._transformAlgorithm = transformAlgorithm;\n  controller._flushAlgorithm = flushAlgorithm;\n}\n\nfunction SetUpTransformStreamDefaultControllerFromTransformer<I, O>(stream: TransformStream<I, O>,\n                                                                    transformer: ValidatedTransformer<I, O>) {\n  const controller: TransformStreamDefaultController<O> = Object.create(TransformStreamDefaultController.prototype);\n\n  let transformAlgorithm = (chunk: I): Promise<void> => {\n    try {\n      TransformStreamDefaultControllerEnqueue(controller, chunk as unknown as O);\n      return promiseResolvedWith(undefined);\n    } catch (transformResultE) {\n      return promiseRejectedWith(transformResultE);\n    }\n  };\n\n  let flushAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (transformer.transform !== undefined) {\n    transformAlgorithm = chunk => transformer.transform!(chunk, controller);\n  }\n  if (transformer.flush !== undefined) {\n    flushAlgorithm = () => transformer.flush!(controller);\n  }\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n}\n\nfunction TransformStreamDefaultControllerClearAlgorithms(controller: TransformStreamDefaultController<any>) {\n  controller._transformAlgorithm = undefined!;\n  controller._flushAlgorithm = undefined!;\n}\n\nfunction TransformStreamDefaultControllerEnqueue<O>(controller: TransformStreamDefaultController<O>, chunk: O) {\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController as ReadableStreamDefaultController<O>;\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n    throw new TypeError('Readable side is not in a state that permits enqueue');\n  }\n\n  // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n  // accept TransformStreamDefaultControllerEnqueue() calls.\n\n  try {\n    ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n  } catch (e) {\n    // This happens when readableStrategy.size() throws.\n    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n\n    throw stream._readable._storedError;\n  }\n\n  const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n  if (backpressure !== stream._backpressure) {\n    assert(backpressure);\n    TransformStreamSetBackpressure(stream, true);\n  }\n}\n\nfunction TransformStreamDefaultControllerError(controller: TransformStreamDefaultController<any>, e: any) {\n  TransformStreamError(controller._controlledTransformStream, e);\n}\n\nfunction TransformStreamDefaultControllerPerformTransform<I, O>(controller: TransformStreamDefaultController<O>,\n                                                                chunk: I) {\n  const transformPromise = controller._transformAlgorithm(chunk);\n  return transformPromiseWith(transformPromise, undefined, r => {\n    TransformStreamError(controller._controlledTransformStream, r);\n    throw r;\n  });\n}\n\nfunction TransformStreamDefaultControllerTerminate<O>(controller: TransformStreamDefaultController<O>) {\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController as ReadableStreamDefaultController<O>;\n\n  ReadableStreamDefaultControllerClose(readableController);\n\n  const error = new TypeError('TransformStream terminated');\n  TransformStreamErrorWritableAndUnblockWrite(stream, error);\n}\n\n// TransformStreamDefaultSink Algorithms\n\nfunction TransformStreamDefaultSinkWriteAlgorithm<I, O>(stream: TransformStream<I, O>, chunk: I): Promise<void> {\n  assert(stream._writable._state === 'writable');\n\n  const controller = stream._transformStreamController;\n\n  if (stream._backpressure) {\n    const backpressureChangePromise = stream._backpressureChangePromise;\n    assert(backpressureChangePromise !== undefined);\n    return transformPromiseWith(backpressureChangePromise, () => {\n      const writable = stream._writable;\n      const state = writable._state;\n      if (state === 'erroring') {\n        throw writable._storedError;\n      }\n      assert(state === 'writable');\n      return TransformStreamDefaultControllerPerformTransform<I, O>(controller, chunk);\n    });\n  }\n\n  return TransformStreamDefaultControllerPerformTransform<I, O>(controller, chunk);\n}\n\nfunction TransformStreamDefaultSinkAbortAlgorithm(stream: TransformStream, reason: any): Promise<void> {\n  // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n  // errored.\n  TransformStreamError(stream, reason);\n  return promiseResolvedWith(undefined);\n}\n\nfunction TransformStreamDefaultSinkCloseAlgorithm<I, O>(stream: TransformStream<I, O>): Promise<void> {\n  // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n  const readable = stream._readable;\n\n  const controller = stream._transformStreamController;\n  const flushPromise = controller._flushAlgorithm();\n  TransformStreamDefaultControllerClearAlgorithms(controller);\n\n  // Return a promise that is fulfilled with undefined on success.\n  return transformPromiseWith(flushPromise, () => {\n    if (readable._state === 'errored') {\n      throw readable._storedError;\n    }\n    ReadableStreamDefaultControllerClose(readable._readableStreamController as ReadableStreamDefaultController<O>);\n  }, r => {\n    TransformStreamError(stream, r);\n    throw readable._storedError;\n  });\n}\n\n// TransformStreamDefaultSource Algorithms\n\nfunction TransformStreamDefaultSourcePullAlgorithm(stream: TransformStream): Promise<void> {\n  // Invariant. Enforced by the promises returned by start() and pull().\n  assert(stream._backpressure);\n\n  assert(stream._backpressureChangePromise !== undefined);\n\n  TransformStreamSetBackpressure(stream, false);\n\n  // Prevent the next pull() call until there is backpressure.\n  return stream._backpressureChangePromise;\n}\n\n// Helper functions for the TransformStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n}\n\n// Helper functions for the TransformStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `TransformStream.prototype.${name} can only be used on a TransformStream`);\n}\n","import {\n  ByteLengthQueuingStrategy,\n  CountQueuingStrategy,\n  ReadableByteStreamController,\n  ReadableStream,\n  ReadableStreamBYOBReader,\n  ReadableStreamBYOBRequest,\n  ReadableStreamDefaultController,\n  ReadableStreamDefaultReader,\n  TransformStream,\n  TransformStreamDefaultController,\n  WritableStream,\n  WritableStreamDefaultController,\n  WritableStreamDefaultWriter\n} from './ponyfill';\nimport { globals } from './utils';\n\n// Export\nexport * from './ponyfill';\n\nconst exports = {\n  ReadableStream,\n  ReadableStreamDefaultController,\n  ReadableByteStreamController,\n  ReadableStreamBYOBRequest,\n  ReadableStreamDefaultReader,\n  ReadableStreamBYOBReader,\n\n  WritableStream,\n  WritableStreamDefaultController,\n  WritableStreamDefaultWriter,\n\n  ByteLengthQueuingStrategy,\n  CountQueuingStrategy,\n\n  TransformStream,\n  TransformStreamDefaultController\n};\n\n// Add classes to global scope\nif (typeof globals !== 'undefined') {\n  for (const prop in exports) {\n    if (Object.prototype.hasOwnProperty.call(exports, prop)) {\n      Object.defineProperty(globals, prop, {\n        value: exports[prop as (keyof typeof exports)],\n        writable: true,\n        configurable: true\n      });\n    }\n  }\n}\n"],"names":["module","exports","instance","Constructor","TypeError","__esModule","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","obj","value","SymbolPolyfill","Symbol","iterator","description","noop","globals","self","window","global","typeIsObject","x","rethrowAssertionErrorRejection","originalPromise","Promise","originalPromiseThen","then","originalPromiseResolve","resolve","bind","originalPromiseReject","reject","newPromise","executor","promiseResolvedWith","promiseRejectedWith","reason","PerformPromiseThen","promise","onFulfilled","onRejected","call","uponPromise","uponFulfillment","uponRejection","transformPromiseWith","fulfillmentHandler","rejectionHandler","setPromiseIsHandledToTrue","queueMicrotask","globalQueueMicrotask","resolvedPromise","fn","reflectCall","F","V","args","Function","apply","promiseCall","SimpleQueue","[object Object]","this","_front","_elements","_next","_back","_cursor","_size","element","oldBack","newBack","QUEUE_MAX_ARRAY_SIZE","push","oldFront","newFront","oldCursor","newCursor","elements","callback","node","front","cursor","ReadableStreamReaderGenericInitialize","reader","stream","_ownerReadableStream","_reader","_state","defaultReaderClosedPromiseInitialize","defaultReaderClosedPromiseResolve","defaultReaderClosedPromiseInitializeAsRejected","_storedError","ReadableStreamReaderGenericCancel","ReadableStreamCancel","ReadableStreamReaderGenericRelease","defaultReaderClosedPromiseReject","undefined","readerLockException","name","_closedPromise","_closedPromise_resolve","_closedPromise_reject","AbortSteps","ErrorSteps","CancelSteps","PullSteps","NumberIsFinite","Number","isFinite","MathTrunc","Math","trunc","v","ceil","floor","assertDictionary","context","assertFunction","assertObject","assertRequiredArgument","position","assertRequiredField","field","convertUnrestrictedDouble","censorNegativeZero","convertUnsignedLongLongWithEnforceRange","upperBound","MAX_SAFE_INTEGER","assertReadableStream","IsReadableStream","AcquireReadableStreamDefaultReader","ReadableStreamDefaultReader","ReadableStreamAddReadRequest","readRequest","_readRequests","ReadableStreamFulfillReadRequest","chunk","done","shift","_closeSteps","_chunkSteps","ReadableStreamGetNumReadRequests","ReadableStreamHasDefaultReader","IsReadableStreamDefaultReader","AsyncIteratorPrototype","IsReadableStreamLocked","closed","defaultReaderBrandCheckException","resolvePromise","rejectPromise","ReadableStreamDefaultReaderRead","_errorSteps","e","hasOwnProperty","_disturbed","_readableStreamController","defineProperties","cancel","read","releaseLock","toStringTag","asyncIterator","ReadableStreamAsyncIteratorImpl","preventCancel","_preventCancel","nextSteps","_nextSteps","_ongoingPromise","returnSteps","_returnSteps","_isFinished","result","ReadableStreamAsyncIteratorPrototype","IsReadableStreamAsyncIterator","_asyncIteratorImpl","next","streamAsyncIteratorBrandCheckException","return","setPrototypeOf","NumberIsNaN","isNaN","CreateArrayFromList","slice","CopyDataBlockBytes","dest","destOffset","src","srcOffset","n","Uint8Array","set","ArrayBufferSlice","buffer","begin","end","ArrayBuffer","CloneAsUint8Array","O","byteOffset","byteLength","DequeueValue","container","pair","_queue","_queueTotalSize","size","EnqueueValueWithSize","Infinity","RangeError","ResetQueue","ReadableStreamBYOBRequest","view","IsReadableStreamBYOBRequest","byobRequestBrandCheckException","_view","bytesWritten","_associatedReadableByteStreamController","ReadableByteStreamControllerRespond","isView","ReadableByteStreamControllerRespondWithNewView","respond","respondWithNewView","ReadableByteStreamController","byobRequest","IsReadableByteStreamController","byteStreamControllerBrandCheckException","ReadableByteStreamControllerGetBYOBRequest","desiredSize","ReadableByteStreamControllerGetDesiredSize","_closeRequested","state","_controlledReadableByteStream","ReadableByteStreamControllerClose","ReadableByteStreamControllerEnqueue","ReadableByteStreamControllerError","ReadableByteStreamControllerClearPendingPullIntos","_cancelAlgorithm","ReadableByteStreamControllerClearAlgorithms","entry","ReadableByteStreamControllerHandleQueueDrain","autoAllocateChunkSize","_autoAllocateChunkSize","bufferE","pullIntoDescriptor","bufferByteLength","bytesFilled","elementSize","viewConstructor","readerType","_pendingPullIntos","ReadableByteStreamControllerCallPullIfNeeded","controller","_started","ReadableStreamHasBYOBReader","ReadableStreamGetNumReadIntoRequests","_pulling","_pullAgain","_pullAlgorithm","ReadableByteStreamControllerInvalidateBYOBRequest","ReadableByteStreamControllerCommitPullIntoDescriptor","filledView","ReadableByteStreamControllerConvertPullIntoDescriptor","readIntoRequest","_readIntoRequests","ReadableByteStreamControllerEnqueueChunkToQueue","ReadableByteStreamControllerFillPullIntoDescriptorFromQueue","currentAlignedBytes","maxBytesToCopy","min","maxBytesFilled","maxAlignedBytes","totalBytesToCopyRemaining","ready","queue","headOfQueue","peek","bytesToCopy","destStart","ReadableByteStreamControllerFillHeadPullIntoDescriptor","ReadableStreamClose","_byobRequest","ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue","ReadableByteStreamControllerShiftPendingPullInto","ReadableByteStreamControllerRespondInternal","firstDescriptor","remainderSize","remainder","transferredBuffer","firstPendingPullInto","ReadableStreamError","create","request","_strategyHWM","viewByteLength","SetUpReadableByteStreamController","startAlgorithm","pullAlgorithm","cancelAlgorithm","highWaterMark","r","AcquireReadableStreamBYOBReader","ReadableStreamBYOBReader","ReadableStreamAddReadIntoRequest","IsReadableStreamBYOBReader","close","enqueue","error","byobReaderBrandCheckException","ReadableStreamBYOBReaderRead","constructor","DataView","BYTES_PER_ELEMENT","ctor","emptyView","ExtractHighWaterMark","strategy","defaultHWM","ExtractSizeAlgorithm","convertQueuingStrategy","init","convertQueuingStrategySize","convertUnderlyingSinkAbortCallback","original","convertUnderlyingSinkCloseCallback","convertUnderlyingSinkStartCallback","convertUnderlyingSinkWriteCallback","assertWritableStream","IsWritableStream","supportsAbortController","AbortController","WritableStream","rawUnderlyingSink","rawStrategy","underlyingSink","abort","start","type","write","InitializeWritableStream","sizeAlgorithm","WritableStreamDefaultController","writeAlgorithm","closeAlgorithm","abortAlgorithm","SetUpWritableStreamDefaultController","locked","streamBrandCheckException","IsWritableStreamLocked","WritableStreamAbort","WritableStreamCloseQueuedOrInFlight","WritableStreamClose","AcquireWritableStreamDefaultWriter","WritableStreamDefaultWriter","_writer","_writableStreamController","_writeRequests","_inFlightWriteRequest","_closeRequest","_inFlightCloseRequest","_pendingAbortRequest","_backpressure","_abortReason","_abortController","_promise","wasAlreadyErroring","_resolve","_reject","_reason","_wasAlreadyErroring","WritableStreamStartErroring","closeRequest","writer","defaultWriterReadyPromiseResolve","closeSentinel","WritableStreamDefaultControllerAdvanceQueueIfNeeded","WritableStreamDealWithRejection","WritableStreamFinishErroring","WritableStreamDefaultWriterEnsureReadyPromiseRejected","storedError","forEach","writeRequest","abortRequest","WritableStreamRejectCloseAndClosedPromiseIfNeeded","defaultWriterClosedPromiseReject","WritableStreamUpdateBackpressure","backpressure","defaultWriterReadyPromiseInitialize","getWriter","_ownerWritableStream","defaultWriterReadyPromiseInitializeAsResolved","defaultWriterClosedPromiseInitialize","defaultWriterReadyPromiseInitializeAsRejected","defaultWriterClosedPromiseResolve","defaultWriterClosedPromiseInitializeAsRejected","IsWritableStreamDefaultWriter","defaultWriterBrandCheckException","defaultWriterLockException","WritableStreamDefaultControllerGetDesiredSize","_readyPromise","WritableStreamDefaultWriterClose","WritableStreamDefaultWriterRelease","WritableStreamDefaultWriterWrite","WritableStreamDefaultWriterEnsureClosedPromiseRejected","_closedPromiseState","_readyPromiseState","defaultWriterReadyPromiseReject","releasedError","chunkSize","_strategySizeAlgorithm","chunkSizeE","WritableStreamDefaultControllerErrorIfNeeded","enqueueE","_controlledWritableStream","WritableStreamDefaultControllerGetBackpressure","abortReason","IsWritableStreamDefaultController","defaultControllerBrandCheckException","signal","WritableStreamDefaultControllerError","_abortAlgorithm","WritableStreamDefaultControllerClearAlgorithms","_writeAlgorithm","_closeAlgorithm","sinkClosePromise","_readyPromise_resolve","_readyPromise_reject","NativeDOMException","DOMException","message","Error","captureStackTrace","createDOMExceptionPolyfill","ReadableStreamPipeTo","source","preventClose","preventAbort","shuttingDown","currentWrite","action","actions","shutdownWithAction","all","map","aborted","addEventListener","isOrBecomesErrored","shutdown","destClosed","waitForWritesToFinish","oldCurrentWrite","originalIsError","originalError","doTheRest","finalize","newError","isError","removeEventListener","resolveLoop","rejectLoop","resolveRead","rejectRead","ReadableStreamDefaultController","IsReadableStreamDefaultController","ReadableStreamDefaultControllerGetDesiredSize","ReadableStreamDefaultControllerCanCloseOrEnqueue","ReadableStreamDefaultControllerClose","ReadableStreamDefaultControllerEnqueue","ReadableStreamDefaultControllerError","ReadableStreamDefaultControllerClearAlgorithms","_controlledReadableStream","ReadableStreamDefaultControllerCallPullIfNeeded","ReadableStreamDefaultControllerShouldCallPull","SetUpReadableStreamDefaultController","ReadableStreamTee","cloneForBranch2","reason1","reason2","branch1","branch2","resolveCancelPromise","reading","readAgainForBranch1","readAgainForBranch2","canceled1","canceled2","cancelPromise","forwardReaderError","thisReader","pullWithDefaultReader","chunk1","chunk2","cloneE","pull1Algorithm","pull2Algorithm","pullWithBYOBReader","forBranch2","byobBranch","otherBranch","byobCanceled","clonedChunk","otherCanceled","cancel1Algorithm","compositeReason","cancelResult","cancel2Algorithm","CreateReadableByteStream","readAgain","CreateReadableStream","convertUnderlyingSourceCancelCallback","convertUnderlyingSourcePullCallback","convertUnderlyingSourceStartCallback","convertReadableStreamType","convertReadableStreamReaderMode","mode","convertPipeOptions","options","Boolean","ReadableStream","rawUnderlyingSource","underlyingSource","pull","InitializeReadableStream","underlyingByteSource","rawOptions","rawTransform","transform","readable","destination","impl","convertQueuingStrategyInit","getReader","pipeThrough","pipeTo","tee","values","byteLengthSizeFunction","ByteLengthQueuingStrategy","_byteLengthQueuingStrategyHighWaterMark","IsByteLengthQueuingStrategy","byteLengthBrandCheckException","countSizeFunction","CountQueuingStrategy","_countQueuingStrategyHighWaterMark","IsCountQueuingStrategy","countBrandCheckException","convertTransformerFlushCallback","convertTransformerStartCallback","convertTransformerTransformCallback","TransformStream","rawTransformer","rawWritableStrategy","rawReadableStrategy","writableStrategy","readableStrategy","transformer","flush","readableType","writableType","startPromise_resolve","readableHighWaterMark","readableSizeAlgorithm","writableHighWaterMark","writableSizeAlgorithm","startPromise","_transformStreamController","_backpressureChangePromise","_writable","TransformStreamDefaultControllerPerformTransform","TransformStreamError","_readable","flushPromise","_flushAlgorithm","TransformStreamDefaultControllerClearAlgorithms","TransformStreamSetBackpressure","TransformStreamErrorWritableAndUnblockWrite","_backpressureChangePromise_resolve","TransformStreamDefaultController","transformAlgorithm","TransformStreamDefaultControllerEnqueue","transformResultE","flushAlgorithm","_controlledTransformStream","_transformAlgorithm","IsTransformStream","IsTransformStreamDefaultController","readableController","terminate","prop"],"sourceRoot":""}